//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XERP
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace XERP.Web.Models.Company
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Company")]
    public sealed partial class Company : Entity
    {
        
        private Nullable<bool> _active;
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private long _autoID;
        
        private string _city;
        
        private EntityRef<CompanyCode> _companyCode;
        
        private string _companyCodeID;
        
        private string _companyID;
        
        private EntityRef<CompanyType> _companyType;
        
        private string _companyTypeID;
        
        private string _country;
        
        private Nullable<int> _currentFiscalYear;
        
        private string _defaultExecutablePath;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private string _faxNum;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private string _state;
        
        private string _stateTaxCode;
        
        private string _taxRegionCode;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyCodeIDChanging(string value);
        partial void OnCompanyCodeIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyTypeIDChanging(string value);
        partial void OnCompanyTypeIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCurrentFiscalYearChanging(Nullable<int> value);
        partial void OnCurrentFiscalYearChanged();
        partial void OnDefaultExecutablePathChanging(string value);
        partial void OnDefaultExecutablePathChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnStateTaxCodeChanging(string value);
        partial void OnStateTaxCodeChanged();
        partial void OnTaxRegionCodeChanging(string value);
        partial void OnTaxRegionCodeChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CompanyCode"/> entity.
        /// </summary>
        [Association("CompanyCode_Company", "CompanyCodeID", "CompanyCodeID", IsForeignKey=true)]
        [XmlIgnore()]
        public CompanyCode CompanyCode
        {
            get
            {
                if ((this._companyCode == null))
                {
                    this._companyCode = new EntityRef<CompanyCode>(this, "CompanyCode", this.FilterCompanyCode);
                }
                return this._companyCode.Entity;
            }
            set
            {
                CompanyCode previous = this.CompanyCode;
                if ((previous != value))
                {
                    this.ValidateProperty("CompanyCode", value);
                    if ((previous != null))
                    {
                        this._companyCode.Entity = null;
                        previous.Companies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyCodeID = value.CompanyCodeID;
                    }
                    else
                    {
                        this.CompanyCodeID = default(string);
                    }
                    this._companyCode.Entity = value;
                    if ((value != null))
                    {
                        value.Companies.Add(this);
                    }
                    this.RaisePropertyChanged("CompanyCode");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyCodeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyCodeID
        {
            get
            {
                return this._companyCodeID;
            }
            set
            {
                if ((this._companyCodeID != value))
                {
                    this.OnCompanyCodeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyCodeID");
                    this.ValidateProperty("CompanyCodeID", value);
                    this._companyCodeID = value;
                    this.RaiseDataMemberChanged("CompanyCodeID");
                    this.OnCompanyCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="CompanyType"/> entity.
        /// </summary>
        [Association("CompanyType_Company", "CompanyTypeID", "CompanyTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public CompanyType CompanyType
        {
            get
            {
                if ((this._companyType == null))
                {
                    this._companyType = new EntityRef<CompanyType>(this, "CompanyType", this.FilterCompanyType);
                }
                return this._companyType.Entity;
            }
            set
            {
                CompanyType previous = this.CompanyType;
                if ((previous != value))
                {
                    this.ValidateProperty("CompanyType", value);
                    if ((previous != null))
                    {
                        this._companyType.Entity = null;
                        previous.Companies.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyTypeID = value.CompanyTypeID;
                    }
                    else
                    {
                        this.CompanyTypeID = default(string);
                    }
                    this._companyType.Entity = value;
                    if ((value != null))
                    {
                        value.Companies.Add(this);
                    }
                    this.RaisePropertyChanged("CompanyType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyTypeID
        {
            get
            {
                return this._companyTypeID;
            }
            set
            {
                if ((this._companyTypeID != value))
                {
                    this.OnCompanyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyTypeID");
                    this.ValidateProperty("CompanyTypeID", value);
                    this._companyTypeID = value;
                    this.RaiseDataMemberChanged("CompanyTypeID");
                    this.OnCompanyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentFiscalYear' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> CurrentFiscalYear
        {
            get
            {
                return this._currentFiscalYear;
            }
            set
            {
                if ((this._currentFiscalYear != value))
                {
                    this.OnCurrentFiscalYearChanging(value);
                    this.RaiseDataMemberChanging("CurrentFiscalYear");
                    this.ValidateProperty("CurrentFiscalYear", value);
                    this._currentFiscalYear = value;
                    this.RaiseDataMemberChanged("CurrentFiscalYear");
                    this.OnCurrentFiscalYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultExecutablePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DefaultExecutablePath
        {
            get
            {
                return this._defaultExecutablePath;
            }
            set
            {
                if ((this._defaultExecutablePath != value))
                {
                    this.OnDefaultExecutablePathChanging(value);
                    this.RaiseDataMemberChanging("DefaultExecutablePath");
                    this.ValidateProperty("DefaultExecutablePath", value);
                    this._defaultExecutablePath = value;
                    this.RaiseDataMemberChanged("DefaultExecutablePath");
                    this.OnDefaultExecutablePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateTaxCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string StateTaxCode
        {
            get
            {
                return this._stateTaxCode;
            }
            set
            {
                if ((this._stateTaxCode != value))
                {
                    this.OnStateTaxCodeChanging(value);
                    this.RaiseDataMemberChanging("StateTaxCode");
                    this.ValidateProperty("StateTaxCode", value);
                    this._stateTaxCode = value;
                    this.RaiseDataMemberChanged("StateTaxCode");
                    this.OnStateTaxCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxRegionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TaxRegionCode
        {
            get
            {
                return this._taxRegionCode;
            }
            set
            {
                if ((this._taxRegionCode != value))
                {
                    this.OnTaxRegionCodeChanging(value);
                    this.RaiseDataMemberChanging("TaxRegionCode");
                    this.ValidateProperty("TaxRegionCode", value);
                    this._taxRegionCode = value;
                    this.RaiseDataMemberChanged("TaxRegionCode");
                    this.OnTaxRegionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private bool FilterCompanyCode(CompanyCode entity)
        {
            return (entity.CompanyCodeID == this.CompanyCodeID);
        }
        
        private bool FilterCompanyType(CompanyType entity)
        {
            return (entity.CompanyTypeID == this.CompanyTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'CompanyCode' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Company")]
    public sealed partial class CompanyCode : Entity
    {
        
        private long _autoID;
        
        private string _code;
        
        private EntityCollection<Company> _companies;
        
        private string _companyCodeID;
        
        private string _description;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCompanyCodeIDChanging(string value);
        partial void OnCompanyCodeIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyCode"/> class.
        /// </summary>
        public CompanyCode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Company"/> entity instances.
        /// </summary>
        [Association("CompanyCode_Company", "CompanyCodeID", "CompanyCodeID")]
        [XmlIgnore()]
        public EntityCollection<Company> Companies
        {
            get
            {
                if ((this._companies == null))
                {
                    this._companies = new EntityCollection<Company>(this, "Companies", this.FilterCompanies, this.AttachCompanies, this.DetachCompanies);
                }
                return this._companies;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyCodeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyCodeID
        {
            get
            {
                return this._companyCodeID;
            }
            set
            {
                if ((this._companyCodeID != value))
                {
                    this.OnCompanyCodeIDChanging(value);
                    this.ValidateProperty("CompanyCodeID", value);
                    this._companyCodeID = value;
                    this.RaisePropertyChanged("CompanyCodeID");
                    this.OnCompanyCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        private void AttachCompanies(Company entity)
        {
            entity.CompanyCode = this;
        }
        
        private void DetachCompanies(Company entity)
        {
            entity.CompanyCode = null;
        }
        
        private bool FilterCompanies(Company entity)
        {
            return (entity.CompanyCodeID == this.CompanyCodeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyCodeID;
        }
    }
    
    /// <summary>
    /// The 'CompanyType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Company")]
    public sealed partial class CompanyType : Entity
    {
        
        private long _autoID;
        
        private EntityCollection<Company> _companies;
        
        private string _companyTypeID;
        
        private string _description;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyTypeIDChanging(string value);
        partial void OnCompanyTypeIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyType"/> class.
        /// </summary>
        public CompanyType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Company"/> entity instances.
        /// </summary>
        [Association("CompanyType_Company", "CompanyTypeID", "CompanyTypeID")]
        [XmlIgnore()]
        public EntityCollection<Company> Companies
        {
            get
            {
                if ((this._companies == null))
                {
                    this._companies = new EntityCollection<Company>(this, "Companies", this.FilterCompanies, this.AttachCompanies, this.DetachCompanies);
                }
                return this._companies;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyTypeID
        {
            get
            {
                return this._companyTypeID;
            }
            set
            {
                if ((this._companyTypeID != value))
                {
                    this.OnCompanyTypeIDChanging(value);
                    this.ValidateProperty("CompanyTypeID", value);
                    this._companyTypeID = value;
                    this.RaisePropertyChanged("CompanyTypeID");
                    this.OnCompanyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private void AttachCompanies(Company entity)
        {
            entity.CompanyType = this;
        }
        
        private void DetachCompanies(Company entity)
        {
            entity.CompanyType = null;
        }
        
        private bool FilterCompanies(Company entity)
        {
            return (entity.CompanyTypeID == this.CompanyTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyTypeID;
        }
    }
}
namespace XERP.Web.Models.MenuItemSecurityGroup
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class Company : Entity
    {
        
        private Nullable<bool> _active;
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private long _autoID;
        
        private string _city;
        
        private string _companyCodeID;
        
        private string _companyID;
        
        private string _companyTypeID;
        
        private string _country;
        
        private Nullable<int> _currentFiscalYear;
        
        private string _defaultExecutablePath;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private string _faxNum;
        
        private EntityCollection<MenuItemCode> _menuItemCodes;
        
        private EntityCollection<MenuItem> _menuItems;
        
        private EntityCollection<MenuItemType> _menuItemTypes;
        
        private EntityCollection<MenuSecurity> _menuSecurities;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private EntityCollection<SecurityGroupCode> _securityGroupCodes;
        
        private EntityCollection<SecurityGroup> _securityGroups;
        
        private EntityCollection<SecurityGroupType> _securityGroupTypes;
        
        private string _state;
        
        private string _stateTaxCode;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        private string _taxRegionCode;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyCodeIDChanging(string value);
        partial void OnCompanyCodeIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyTypeIDChanging(string value);
        partial void OnCompanyTypeIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCurrentFiscalYearChanging(Nullable<int> value);
        partial void OnCurrentFiscalYearChanged();
        partial void OnDefaultExecutablePathChanging(string value);
        partial void OnDefaultExecutablePathChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnStateTaxCodeChanging(string value);
        partial void OnStateTaxCodeChanged();
        partial void OnTaxRegionCodeChanging(string value);
        partial void OnTaxRegionCodeChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyCodeID
        {
            get
            {
                return this._companyCodeID;
            }
            set
            {
                if ((this._companyCodeID != value))
                {
                    this.OnCompanyCodeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyCodeID");
                    this.ValidateProperty("CompanyCodeID", value);
                    this._companyCodeID = value;
                    this.RaiseDataMemberChanged("CompanyCodeID");
                    this.OnCompanyCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyTypeID
        {
            get
            {
                return this._companyTypeID;
            }
            set
            {
                if ((this._companyTypeID != value))
                {
                    this.OnCompanyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyTypeID");
                    this.ValidateProperty("CompanyTypeID", value);
                    this._companyTypeID = value;
                    this.RaiseDataMemberChanged("CompanyTypeID");
                    this.OnCompanyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentFiscalYear' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> CurrentFiscalYear
        {
            get
            {
                return this._currentFiscalYear;
            }
            set
            {
                if ((this._currentFiscalYear != value))
                {
                    this.OnCurrentFiscalYearChanging(value);
                    this.RaiseDataMemberChanging("CurrentFiscalYear");
                    this.ValidateProperty("CurrentFiscalYear", value);
                    this._currentFiscalYear = value;
                    this.RaiseDataMemberChanged("CurrentFiscalYear");
                    this.OnCurrentFiscalYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultExecutablePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DefaultExecutablePath
        {
            get
            {
                return this._defaultExecutablePath;
            }
            set
            {
                if ((this._defaultExecutablePath != value))
                {
                    this.OnDefaultExecutablePathChanging(value);
                    this.RaiseDataMemberChanging("DefaultExecutablePath");
                    this.ValidateProperty("DefaultExecutablePath", value);
                    this._defaultExecutablePath = value;
                    this.RaiseDataMemberChanged("DefaultExecutablePath");
                    this.OnDefaultExecutablePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuItemCode"/> entity instances.
        /// </summary>
        [Association("Company_MenuItemCode", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<MenuItemCode> MenuItemCodes
        {
            get
            {
                if ((this._menuItemCodes == null))
                {
                    this._menuItemCodes = new EntityCollection<MenuItemCode>(this, "MenuItemCodes", this.FilterMenuItemCodes, this.AttachMenuItemCodes, this.DetachMenuItemCodes);
                }
                return this._menuItemCodes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuItem"/> entity instances.
        /// </summary>
        [Association("Company_MenuItem", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<MenuItem> MenuItems
        {
            get
            {
                if ((this._menuItems == null))
                {
                    this._menuItems = new EntityCollection<MenuItem>(this, "MenuItems", this.FilterMenuItems, this.AttachMenuItems, this.DetachMenuItems);
                }
                return this._menuItems;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuItemType"/> entity instances.
        /// </summary>
        [Association("Company_MenuItemType", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<MenuItemType> MenuItemTypes
        {
            get
            {
                if ((this._menuItemTypes == null))
                {
                    this._menuItemTypes = new EntityCollection<MenuItemType>(this, "MenuItemTypes", this.FilterMenuItemTypes, this.AttachMenuItemTypes, this.DetachMenuItemTypes);
                }
                return this._menuItemTypes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuSecurity"/> entity instances.
        /// </summary>
        [Association("Company_MenuSecurity", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<MenuSecurity> MenuSecurities
        {
            get
            {
                if ((this._menuSecurities == null))
                {
                    this._menuSecurities = new EntityCollection<MenuSecurity>(this, "MenuSecurities", this.FilterMenuSecurities, this.AttachMenuSecurities, this.DetachMenuSecurities);
                }
                return this._menuSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroupCode"/> entity instances.
        /// </summary>
        [Association("Company_SecurityGroupCode", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroupCode> SecurityGroupCodes
        {
            get
            {
                if ((this._securityGroupCodes == null))
                {
                    this._securityGroupCodes = new EntityCollection<SecurityGroupCode>(this, "SecurityGroupCodes", this.FilterSecurityGroupCodes, this.AttachSecurityGroupCodes, this.DetachSecurityGroupCodes);
                }
                return this._securityGroupCodes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroup"/> entity instances.
        /// </summary>
        [Association("Company_SecurityGroup", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroup> SecurityGroups
        {
            get
            {
                if ((this._securityGroups == null))
                {
                    this._securityGroups = new EntityCollection<SecurityGroup>(this, "SecurityGroups", this.FilterSecurityGroups, this.AttachSecurityGroups, this.DetachSecurityGroups);
                }
                return this._securityGroups;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroupType"/> entity instances.
        /// </summary>
        [Association("Company_SecurityGroupType", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroupType> SecurityGroupTypes
        {
            get
            {
                if ((this._securityGroupTypes == null))
                {
                    this._securityGroupTypes = new EntityCollection<SecurityGroupType>(this, "SecurityGroupTypes", this.FilterSecurityGroupTypes, this.AttachSecurityGroupTypes, this.DetachSecurityGroupTypes);
                }
                return this._securityGroupTypes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateTaxCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string StateTaxCode
        {
            get
            {
                return this._stateTaxCode;
            }
            set
            {
                if ((this._stateTaxCode != value))
                {
                    this.OnStateTaxCodeChanging(value);
                    this.RaiseDataMemberChanging("StateTaxCode");
                    this.ValidateProperty("StateTaxCode", value);
                    this._stateTaxCode = value;
                    this.RaiseDataMemberChanged("StateTaxCode");
                    this.OnStateTaxCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("Company_SystemUserSecurity", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxRegionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TaxRegionCode
        {
            get
            {
                return this._taxRegionCode;
            }
            set
            {
                if ((this._taxRegionCode != value))
                {
                    this.OnTaxRegionCodeChanging(value);
                    this.RaiseDataMemberChanging("TaxRegionCode");
                    this.ValidateProperty("TaxRegionCode", value);
                    this._taxRegionCode = value;
                    this.RaiseDataMemberChanged("TaxRegionCode");
                    this.OnTaxRegionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private void AttachMenuItemCodes(MenuItemCode entity)
        {
            entity.Company = this;
        }
        
        private void DetachMenuItemCodes(MenuItemCode entity)
        {
            entity.Company = null;
        }
        
        private bool FilterMenuItemCodes(MenuItemCode entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuItems(MenuItem entity)
        {
            entity.Company = this;
        }
        
        private void DetachMenuItems(MenuItem entity)
        {
            entity.Company = null;
        }
        
        private bool FilterMenuItems(MenuItem entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuItemTypes(MenuItemType entity)
        {
            entity.Company = this;
        }
        
        private void DetachMenuItemTypes(MenuItemType entity)
        {
            entity.Company = null;
        }
        
        private bool FilterMenuItemTypes(MenuItemType entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuSecurities(MenuSecurity entity)
        {
            entity.Company = this;
        }
        
        private void DetachMenuSecurities(MenuSecurity entity)
        {
            entity.Company = null;
        }
        
        private bool FilterMenuSecurities(MenuSecurity entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroupCodes(SecurityGroupCode entity)
        {
            entity.Company = this;
        }
        
        private void DetachSecurityGroupCodes(SecurityGroupCode entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSecurityGroupCodes(SecurityGroupCode entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroups(SecurityGroup entity)
        {
            entity.Company = this;
        }
        
        private void DetachSecurityGroups(SecurityGroup entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSecurityGroups(SecurityGroup entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroupTypes(SecurityGroupType entity)
        {
            entity.Company = this;
        }
        
        private void DetachSecurityGroupTypes(SecurityGroupType entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSecurityGroupTypes(SecurityGroupType entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.Company = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'MenuItem' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class MenuItem : Entity
    {
        
        private Nullable<bool> _active;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private Nullable<int> _displayOrder;
        
        private string _execuatableProgram;
        
        private Nullable<bool> _executable;
        
        private string _executablePath;
        
        private Nullable<bool> _hideMenu;
        
        private string _imageID;
        
        private EntityRef<MenuItemCode> _menuItemCode;
        
        private string _menuItemCodeID;
        
        private string _menuItemID;
        
        private EntityRef<MenuItemType> _menuItemType;
        
        private string _menuItemTypeID;
        
        private EntityCollection<MenuSecurity> _menuSecurities;
        
        private string _name;
        
        private string _parentMenuID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnDisplayOrderChanging(Nullable<int> value);
        partial void OnDisplayOrderChanged();
        partial void OnExecuatableProgramChanging(string value);
        partial void OnExecuatableProgramChanged();
        partial void OnExecutableChanging(Nullable<bool> value);
        partial void OnExecutableChanged();
        partial void OnExecutablePathChanging(string value);
        partial void OnExecutablePathChanged();
        partial void OnHideMenuChanging(Nullable<bool> value);
        partial void OnHideMenuChanged();
        partial void OnImageIDChanging(string value);
        partial void OnImageIDChanged();
        partial void OnMenuItemCodeIDChanging(string value);
        partial void OnMenuItemCodeIDChanged();
        partial void OnMenuItemIDChanging(string value);
        partial void OnMenuItemIDChanged();
        partial void OnMenuItemTypeIDChanging(string value);
        partial void OnMenuItemTypeIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnParentMenuIDChanging(string value);
        partial void OnParentMenuIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItem"/> class.
        /// </summary>
        public MenuItem()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_MenuItem", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.MenuItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.MenuItems.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DisplayOrder' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> DisplayOrder
        {
            get
            {
                return this._displayOrder;
            }
            set
            {
                if ((this._displayOrder != value))
                {
                    this.OnDisplayOrderChanging(value);
                    this.RaiseDataMemberChanging("DisplayOrder");
                    this.ValidateProperty("DisplayOrder", value);
                    this._displayOrder = value;
                    this.RaiseDataMemberChanged("DisplayOrder");
                    this.OnDisplayOrderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExecuatableProgram' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string ExecuatableProgram
        {
            get
            {
                return this._execuatableProgram;
            }
            set
            {
                if ((this._execuatableProgram != value))
                {
                    this.OnExecuatableProgramChanging(value);
                    this.RaiseDataMemberChanging("ExecuatableProgram");
                    this.ValidateProperty("ExecuatableProgram", value);
                    this._execuatableProgram = value;
                    this.RaiseDataMemberChanged("ExecuatableProgram");
                    this.OnExecuatableProgramChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Executable' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Executable
        {
            get
            {
                return this._executable;
            }
            set
            {
                if ((this._executable != value))
                {
                    this.OnExecutableChanging(value);
                    this.RaiseDataMemberChanging("Executable");
                    this.ValidateProperty("Executable", value);
                    this._executable = value;
                    this.RaiseDataMemberChanged("Executable");
                    this.OnExecutableChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExecutablePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string ExecutablePath
        {
            get
            {
                return this._executablePath;
            }
            set
            {
                if ((this._executablePath != value))
                {
                    this.OnExecutablePathChanging(value);
                    this.RaiseDataMemberChanging("ExecutablePath");
                    this.ValidateProperty("ExecutablePath", value);
                    this._executablePath = value;
                    this.RaiseDataMemberChanged("ExecutablePath");
                    this.OnExecutablePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HideMenu' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> HideMenu
        {
            get
            {
                return this._hideMenu;
            }
            set
            {
                if ((this._hideMenu != value))
                {
                    this.OnHideMenuChanging(value);
                    this.RaiseDataMemberChanging("HideMenu");
                    this.ValidateProperty("HideMenu", value);
                    this._hideMenu = value;
                    this.RaiseDataMemberChanged("HideMenu");
                    this.OnHideMenuChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MenuItemCode"/> entity.
        /// </summary>
        [Association("MenuItemCode_MenuItem", "CompanyID,MenuItemCodeID", "CompanyID,MenuItemCodeID", IsForeignKey=true)]
        [XmlIgnore()]
        public MenuItemCode MenuItemCode
        {
            get
            {
                if ((this._menuItemCode == null))
                {
                    this._menuItemCode = new EntityRef<MenuItemCode>(this, "MenuItemCode", this.FilterMenuItemCode);
                }
                return this._menuItemCode.Entity;
            }
            set
            {
                MenuItemCode previous = this.MenuItemCode;
                if ((previous != value))
                {
                    this.ValidateProperty("MenuItemCode", value);
                    if ((previous != null))
                    {
                        this._menuItemCode.Entity = null;
                        previous.MenuItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.MenuItemCodeID = value.MenuItemCodeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.MenuItemCodeID = default(string);
                    }
                    this._menuItemCode.Entity = value;
                    if ((value != null))
                    {
                        value.MenuItems.Add(this);
                    }
                    this.RaisePropertyChanged("MenuItemCode");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemCodeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemCodeID
        {
            get
            {
                return this._menuItemCodeID;
            }
            set
            {
                if ((this._menuItemCodeID != value))
                {
                    this.OnMenuItemCodeIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemCodeID");
                    this.ValidateProperty("MenuItemCodeID", value);
                    this._menuItemCodeID = value;
                    this.RaiseDataMemberChanged("MenuItemCodeID");
                    this.OnMenuItemCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemID
        {
            get
            {
                return this._menuItemID;
            }
            set
            {
                if ((this._menuItemID != value))
                {
                    this.OnMenuItemIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemID");
                    this.ValidateProperty("MenuItemID", value);
                    this._menuItemID = value;
                    this.RaiseDataMemberChanged("MenuItemID");
                    this.OnMenuItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MenuItemType"/> entity.
        /// </summary>
        [Association("MenuItemType_MenuItem", "CompanyID,MenuItemTypeID", "CompanyID,MenuItemTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public MenuItemType MenuItemType
        {
            get
            {
                if ((this._menuItemType == null))
                {
                    this._menuItemType = new EntityRef<MenuItemType>(this, "MenuItemType", this.FilterMenuItemType);
                }
                return this._menuItemType.Entity;
            }
            set
            {
                MenuItemType previous = this.MenuItemType;
                if ((previous != value))
                {
                    this.ValidateProperty("MenuItemType", value);
                    if ((previous != null))
                    {
                        this._menuItemType.Entity = null;
                        previous.MenuItems.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.MenuItemTypeID = value.MenuItemTypeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.MenuItemTypeID = default(string);
                    }
                    this._menuItemType.Entity = value;
                    if ((value != null))
                    {
                        value.MenuItems.Add(this);
                    }
                    this.RaisePropertyChanged("MenuItemType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemTypeID
        {
            get
            {
                return this._menuItemTypeID;
            }
            set
            {
                if ((this._menuItemTypeID != value))
                {
                    this.OnMenuItemTypeIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemTypeID");
                    this.ValidateProperty("MenuItemTypeID", value);
                    this._menuItemTypeID = value;
                    this.RaiseDataMemberChanged("MenuItemTypeID");
                    this.OnMenuItemTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuSecurity"/> entity instances.
        /// </summary>
        [Association("MenuItem_MenuSecurity", "CompanyID,MenuItemID", "CompanyID,MenuItemID")]
        [XmlIgnore()]
        public EntityCollection<MenuSecurity> MenuSecurities
        {
            get
            {
                if ((this._menuSecurities == null))
                {
                    this._menuSecurities = new EntityCollection<MenuSecurity>(this, "MenuSecurities", this.FilterMenuSecurities, this.AttachMenuSecurities, this.DetachMenuSecurities);
                }
                return this._menuSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ParentMenuID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ParentMenuID
        {
            get
            {
                return this._parentMenuID;
            }
            set
            {
                if ((this._parentMenuID != value))
                {
                    this.OnParentMenuIDChanging(value);
                    this.RaiseDataMemberChanging("ParentMenuID");
                    this.ValidateProperty("ParentMenuID", value);
                    this._parentMenuID = value;
                    this.RaiseDataMemberChanged("ParentMenuID");
                    this.OnParentMenuIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterMenuItemCode(MenuItemCode entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemCodeID == this.MenuItemCodeID));
        }
        
        private bool FilterMenuItemType(MenuItemType entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemTypeID == this.MenuItemTypeID));
        }
        
        private void AttachMenuSecurities(MenuSecurity entity)
        {
            entity.MenuItem = this;
        }
        
        private void DetachMenuSecurities(MenuSecurity entity)
        {
            entity.MenuItem = null;
        }
        
        private bool FilterMenuSecurities(MenuSecurity entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemID == this.MenuItemID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._menuItemID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._menuItemID);
        }
    }
    
    /// <summary>
    /// The 'MenuItemCode' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class MenuItemCode : Entity
    {
        
        private long _autoID;
        
        private string _code;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private string _menuItemCodeID;
        
        private EntityCollection<MenuItem> _menuItems;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMenuItemCodeIDChanging(string value);
        partial void OnMenuItemCodeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemCode"/> class.
        /// </summary>
        public MenuItemCode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_MenuItemCode", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.MenuItemCodes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.MenuItemCodes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemCodeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemCodeID
        {
            get
            {
                return this._menuItemCodeID;
            }
            set
            {
                if ((this._menuItemCodeID != value))
                {
                    this.OnMenuItemCodeIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemCodeID");
                    this.ValidateProperty("MenuItemCodeID", value);
                    this._menuItemCodeID = value;
                    this.RaiseDataMemberChanged("MenuItemCodeID");
                    this.OnMenuItemCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuItem"/> entity instances.
        /// </summary>
        [Association("MenuItemCode_MenuItem", "CompanyID,MenuItemCodeID", "CompanyID,MenuItemCodeID")]
        [XmlIgnore()]
        public EntityCollection<MenuItem> MenuItems
        {
            get
            {
                if ((this._menuItems == null))
                {
                    this._menuItems = new EntityCollection<MenuItem>(this, "MenuItems", this.FilterMenuItems, this.AttachMenuItems, this.DetachMenuItems);
                }
                return this._menuItems;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuItems(MenuItem entity)
        {
            entity.MenuItemCode = this;
        }
        
        private void DetachMenuItems(MenuItem entity)
        {
            entity.MenuItemCode = null;
        }
        
        private bool FilterMenuItems(MenuItem entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemCodeID == this.MenuItemCodeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._menuItemCodeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._menuItemCodeID);
        }
    }
    
    /// <summary>
    /// The 'MenuItemType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class MenuItemType : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private EntityCollection<MenuItem> _menuItems;
        
        private string _menuItemTypeID;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnMenuItemTypeIDChanging(string value);
        partial void OnMenuItemTypeIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemType"/> class.
        /// </summary>
        public MenuItemType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_MenuItemType", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.MenuItemTypes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.MenuItemTypes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuItem"/> entity instances.
        /// </summary>
        [Association("MenuItemType_MenuItem", "CompanyID,MenuItemTypeID", "CompanyID,MenuItemTypeID")]
        [XmlIgnore()]
        public EntityCollection<MenuItem> MenuItems
        {
            get
            {
                if ((this._menuItems == null))
                {
                    this._menuItems = new EntityCollection<MenuItem>(this, "MenuItems", this.FilterMenuItems, this.AttachMenuItems, this.DetachMenuItems);
                }
                return this._menuItems;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemTypeID
        {
            get
            {
                return this._menuItemTypeID;
            }
            set
            {
                if ((this._menuItemTypeID != value))
                {
                    this.OnMenuItemTypeIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemTypeID");
                    this.ValidateProperty("MenuItemTypeID", value);
                    this._menuItemTypeID = value;
                    this.RaiseDataMemberChanged("MenuItemTypeID");
                    this.OnMenuItemTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuItems(MenuItem entity)
        {
            entity.MenuItemType = this;
        }
        
        private void DetachMenuItems(MenuItem entity)
        {
            entity.MenuItemType = null;
        }
        
        private bool FilterMenuItems(MenuItem entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemTypeID == this.MenuItemTypeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._menuItemTypeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._menuItemTypeID);
        }
    }
    
    /// <summary>
    /// The 'MenuSecurity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class MenuSecurity : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private EntityRef<MenuItem> _menuItem;
        
        private string _menuItemID;
        
        private EntityRef<SecurityGroup> _securityGroup;
        
        private string _securityGroupID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnMenuItemIDChanging(string value);
        partial void OnMenuItemIDChanged();
        partial void OnSecurityGroupIDChanging(string value);
        partial void OnSecurityGroupIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuSecurity"/> class.
        /// </summary>
        public MenuSecurity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_MenuSecurity", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.MenuSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.MenuSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="MenuItem"/> entity.
        /// </summary>
        [Association("MenuItem_MenuSecurity", "CompanyID,MenuItemID", "CompanyID,MenuItemID", IsForeignKey=true)]
        [XmlIgnore()]
        public MenuItem MenuItem
        {
            get
            {
                if ((this._menuItem == null))
                {
                    this._menuItem = new EntityRef<MenuItem>(this, "MenuItem", this.FilterMenuItem);
                }
                return this._menuItem.Entity;
            }
            set
            {
                MenuItem previous = this.MenuItem;
                if ((previous != value))
                {
                    this.ValidateProperty("MenuItem", value);
                    if ((previous != null))
                    {
                        this._menuItem.Entity = null;
                        previous.MenuSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.MenuItemID = value.MenuItemID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.MenuItemID = default(string);
                    }
                    this._menuItem.Entity = value;
                    if ((value != null))
                    {
                        value.MenuSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("MenuItem");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MenuItemID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string MenuItemID
        {
            get
            {
                return this._menuItemID;
            }
            set
            {
                if ((this._menuItemID != value))
                {
                    this.OnMenuItemIDChanging(value);
                    this.RaiseDataMemberChanging("MenuItemID");
                    this.ValidateProperty("MenuItemID", value);
                    this._menuItemID = value;
                    this.RaiseDataMemberChanged("MenuItemID");
                    this.OnMenuItemIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityGroup"/> entity.
        /// </summary>
        [Association("SecurityGroup_MenuSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityGroup SecurityGroup
        {
            get
            {
                if ((this._securityGroup == null))
                {
                    this._securityGroup = new EntityRef<SecurityGroup>(this, "SecurityGroup", this.FilterSecurityGroup);
                }
                return this._securityGroup.Entity;
            }
            set
            {
                SecurityGroup previous = this.SecurityGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityGroup", value);
                    if ((previous != null))
                    {
                        this._securityGroup.Entity = null;
                        previous.MenuSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SecurityGroupID = value.SecurityGroupID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.SecurityGroupID = default(string);
                    }
                    this._securityGroup.Entity = value;
                    if ((value != null))
                    {
                        value.MenuSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupID
        {
            get
            {
                return this._securityGroupID;
            }
            set
            {
                if ((this._securityGroupID != value))
                {
                    this.OnSecurityGroupIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupID");
                    this.ValidateProperty("SecurityGroupID", value);
                    this._securityGroupID = value;
                    this.RaiseDataMemberChanged("SecurityGroupID");
                    this.OnSecurityGroupIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterMenuItem(MenuItem entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.MenuItemID == this.MenuItemID));
        }
        
        private bool FilterSecurityGroup(SecurityGroup entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((((this._companyID == null) 
                        || (this._menuItemID == null)) 
                        || (this._securityGroupID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._menuItemID, this._securityGroupID);
        }
    }
    
    /// <summary>
    /// The 'SecurityGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class SecurityGroup : Entity
    {
        
        private Nullable<bool> _active;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private EntityCollection<MenuSecurity> _menuSecurities;
        
        private string _name;
        
        private string _notes;
        
        private EntityRef<SecurityGroupCode> _securityGroupCode;
        
        private string _securityGroupCodeID;
        
        private string _securityGroupID;
        
        private EntityRef<SecurityGroupType> _securityGroupType;
        
        private string _securityGroupTypeID;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnSecurityGroupCodeIDChanging(string value);
        partial void OnSecurityGroupCodeIDChanged();
        partial void OnSecurityGroupIDChanging(string value);
        partial void OnSecurityGroupIDChanged();
        partial void OnSecurityGroupTypeIDChanging(string value);
        partial void OnSecurityGroupTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroup"/> class.
        /// </summary>
        public SecurityGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SecurityGroup", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SecurityGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroups.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="MenuSecurity"/> entity instances.
        /// </summary>
        [Association("SecurityGroup_MenuSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID")]
        [XmlIgnore()]
        public EntityCollection<MenuSecurity> MenuSecurities
        {
            get
            {
                if ((this._menuSecurities == null))
                {
                    this._menuSecurities = new EntityCollection<MenuSecurity>(this, "MenuSecurities", this.FilterMenuSecurities, this.AttachMenuSecurities, this.DetachMenuSecurities);
                }
                return this._menuSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityGroupCode"/> entity.
        /// </summary>
        [Association("SecurityGroupCode_SecurityGroup", "CompanyID,SecurityGroupCodeID", "CompanyID,SecurityGroupCodeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityGroupCode SecurityGroupCode
        {
            get
            {
                if ((this._securityGroupCode == null))
                {
                    this._securityGroupCode = new EntityRef<SecurityGroupCode>(this, "SecurityGroupCode", this.FilterSecurityGroupCode);
                }
                return this._securityGroupCode.Entity;
            }
            set
            {
                SecurityGroupCode previous = this.SecurityGroupCode;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityGroupCode", value);
                    if ((previous != null))
                    {
                        this._securityGroupCode.Entity = null;
                        previous.SecurityGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SecurityGroupCodeID = value.SecurityGroupCodeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.SecurityGroupCodeID = default(string);
                    }
                    this._securityGroupCode.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroups.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityGroupCode");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupCodeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupCodeID
        {
            get
            {
                return this._securityGroupCodeID;
            }
            set
            {
                if ((this._securityGroupCodeID != value))
                {
                    this.OnSecurityGroupCodeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupCodeID");
                    this.ValidateProperty("SecurityGroupCodeID", value);
                    this._securityGroupCodeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupCodeID");
                    this.OnSecurityGroupCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupID
        {
            get
            {
                return this._securityGroupID;
            }
            set
            {
                if ((this._securityGroupID != value))
                {
                    this.OnSecurityGroupIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupID");
                    this.ValidateProperty("SecurityGroupID", value);
                    this._securityGroupID = value;
                    this.RaiseDataMemberChanged("SecurityGroupID");
                    this.OnSecurityGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityGroupType"/> entity.
        /// </summary>
        [Association("SecurityGroupType_SecurityGroup", "CompanyID,SecurityGroupTypeID", "CompanyID,SecurityGroupTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityGroupType SecurityGroupType
        {
            get
            {
                if ((this._securityGroupType == null))
                {
                    this._securityGroupType = new EntityRef<SecurityGroupType>(this, "SecurityGroupType", this.FilterSecurityGroupType);
                }
                return this._securityGroupType.Entity;
            }
            set
            {
                SecurityGroupType previous = this.SecurityGroupType;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityGroupType", value);
                    if ((previous != null))
                    {
                        this._securityGroupType.Entity = null;
                        previous.SecurityGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SecurityGroupTypeID = value.SecurityGroupTypeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.SecurityGroupTypeID = default(string);
                    }
                    this._securityGroupType.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroups.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityGroupType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupTypeID
        {
            get
            {
                return this._securityGroupTypeID;
            }
            set
            {
                if ((this._securityGroupTypeID != value))
                {
                    this.OnSecurityGroupTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupTypeID");
                    this.ValidateProperty("SecurityGroupTypeID", value);
                    this._securityGroupTypeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupTypeID");
                    this.OnSecurityGroupTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("SecurityGroup_SystemUserSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachMenuSecurities(MenuSecurity entity)
        {
            entity.SecurityGroup = this;
        }
        
        private void DetachMenuSecurities(MenuSecurity entity)
        {
            entity.SecurityGroup = null;
        }
        
        private bool FilterMenuSecurities(MenuSecurity entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        private bool FilterSecurityGroupCode(SecurityGroupCode entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupCodeID == this.SecurityGroupCodeID));
        }
        
        private bool FilterSecurityGroupType(SecurityGroupType entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupTypeID == this.SecurityGroupTypeID));
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SecurityGroup = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SecurityGroup = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._securityGroupID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupID);
        }
    }
    
    /// <summary>
    /// The 'SecurityGroupCode' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class SecurityGroupCode : Entity
    {
        
        private long _autoID;
        
        private string _code;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private string _securityGroupCodeID;
        
        private EntityCollection<SecurityGroup> _securityGroups;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSecurityGroupCodeIDChanging(string value);
        partial void OnSecurityGroupCodeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroupCode"/> class.
        /// </summary>
        public SecurityGroupCode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SecurityGroupCode", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SecurityGroupCodes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroupCodes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupCodeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupCodeID
        {
            get
            {
                return this._securityGroupCodeID;
            }
            set
            {
                if ((this._securityGroupCodeID != value))
                {
                    this.OnSecurityGroupCodeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupCodeID");
                    this.ValidateProperty("SecurityGroupCodeID", value);
                    this._securityGroupCodeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupCodeID");
                    this.OnSecurityGroupCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroup"/> entity instances.
        /// </summary>
        [Association("SecurityGroupCode_SecurityGroup", "CompanyID,SecurityGroupCodeID", "CompanyID,SecurityGroupCodeID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroup> SecurityGroups
        {
            get
            {
                if ((this._securityGroups == null))
                {
                    this._securityGroups = new EntityCollection<SecurityGroup>(this, "SecurityGroups", this.FilterSecurityGroups, this.AttachSecurityGroups, this.DetachSecurityGroups);
                }
                return this._securityGroups;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroups(SecurityGroup entity)
        {
            entity.SecurityGroupCode = this;
        }
        
        private void DetachSecurityGroups(SecurityGroup entity)
        {
            entity.SecurityGroupCode = null;
        }
        
        private bool FilterSecurityGroups(SecurityGroup entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupCodeID == this.SecurityGroupCodeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._securityGroupCodeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupCodeID);
        }
    }
    
    /// <summary>
    /// The 'SecurityGroupType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class SecurityGroupType : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private EntityCollection<SecurityGroup> _securityGroups;
        
        private string _securityGroupTypeID;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSecurityGroupTypeIDChanging(string value);
        partial void OnSecurityGroupTypeIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroupType"/> class.
        /// </summary>
        public SecurityGroupType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SecurityGroupType", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SecurityGroupTypes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroupTypes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroup"/> entity instances.
        /// </summary>
        [Association("SecurityGroupType_SecurityGroup", "CompanyID,SecurityGroupTypeID", "CompanyID,SecurityGroupTypeID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroup> SecurityGroups
        {
            get
            {
                if ((this._securityGroups == null))
                {
                    this._securityGroups = new EntityCollection<SecurityGroup>(this, "SecurityGroups", this.FilterSecurityGroups, this.AttachSecurityGroups, this.DetachSecurityGroups);
                }
                return this._securityGroups;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupTypeID
        {
            get
            {
                return this._securityGroupTypeID;
            }
            set
            {
                if ((this._securityGroupTypeID != value))
                {
                    this.OnSecurityGroupTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupTypeID");
                    this.ValidateProperty("SecurityGroupTypeID", value);
                    this._securityGroupTypeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupTypeID");
                    this.OnSecurityGroupTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroups(SecurityGroup entity)
        {
            entity.SecurityGroupType = this;
        }
        
        private void DetachSecurityGroups(SecurityGroup entity)
        {
            entity.SecurityGroupType = null;
        }
        
        private bool FilterSecurityGroups(SecurityGroup entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupTypeID == this.SecurityGroupTypeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._securityGroupTypeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupTypeID);
        }
    }
    
    /// <summary>
    /// The 'SystemUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class SystemUser : Entity
    {
        
        private Nullable<bool> _active;
        
        private string _addressID;
        
        private long _autoID;
        
        private string _defaultCompanyID;
        
        private string _defaultPlantID;
        
        private string _emailAddress;
        
        private byte[] _imageID;
        
        private string _name;
        
        private string _password;
        
        private Nullable<bool> _passwordExpired;
        
        private Nullable<DateTime> _passwordExpiresOn;
        
        private Nullable<bool> _systemManager;
        
        private string _systemUserCodeID;
        
        private string _systemUserID;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        private string _systemUserTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnDefaultCompanyIDChanging(string value);
        partial void OnDefaultCompanyIDChanged();
        partial void OnDefaultPlantIDChanging(string value);
        partial void OnDefaultPlantIDChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnImageIDChanging(byte[] value);
        partial void OnImageIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPasswordExpiredChanging(Nullable<bool> value);
        partial void OnPasswordExpiredChanged();
        partial void OnPasswordExpiresOnChanging(Nullable<DateTime> value);
        partial void OnPasswordExpiresOnChanged();
        partial void OnSystemManagerChanging(Nullable<bool> value);
        partial void OnSystemManagerChanged();
        partial void OnSystemUserCodeIDChanging(string value);
        partial void OnSystemUserCodeIDChanged();
        partial void OnSystemUserIDChanging(string value);
        partial void OnSystemUserIDChanged();
        partial void OnSystemUserTypeIDChanging(string value);
        partial void OnSystemUserTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUser"/> class.
        /// </summary>
        public SystemUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultCompanyID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DefaultCompanyID
        {
            get
            {
                return this._defaultCompanyID;
            }
            set
            {
                if ((this._defaultCompanyID != value))
                {
                    this.OnDefaultCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("DefaultCompanyID");
                    this.ValidateProperty("DefaultCompanyID", value);
                    this._defaultCompanyID = value;
                    this.RaiseDataMemberChanged("DefaultCompanyID");
                    this.OnDefaultCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultPlantID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DefaultPlantID
        {
            get
            {
                return this._defaultPlantID;
            }
            set
            {
                if ((this._defaultPlantID != value))
                {
                    this.OnDefaultPlantIDChanging(value);
                    this.RaiseDataMemberChanging("DefaultPlantID");
                    this.ValidateProperty("DefaultPlantID", value);
                    this._defaultPlantID = value;
                    this.RaiseDataMemberChanged("DefaultPlantID");
                    this.OnDefaultPlantIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        public byte[] ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordExpired' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> PasswordExpired
        {
            get
            {
                return this._passwordExpired;
            }
            set
            {
                if ((this._passwordExpired != value))
                {
                    this.OnPasswordExpiredChanging(value);
                    this.RaiseDataMemberChanging("PasswordExpired");
                    this.ValidateProperty("PasswordExpired", value);
                    this._passwordExpired = value;
                    this.RaiseDataMemberChanged("PasswordExpired");
                    this.OnPasswordExpiredChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordExpiresOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PasswordExpiresOn
        {
            get
            {
                return this._passwordExpiresOn;
            }
            set
            {
                if ((this._passwordExpiresOn != value))
                {
                    this.OnPasswordExpiresOnChanging(value);
                    this.RaiseDataMemberChanging("PasswordExpiresOn");
                    this.ValidateProperty("PasswordExpiresOn", value);
                    this._passwordExpiresOn = value;
                    this.RaiseDataMemberChanged("PasswordExpiresOn");
                    this.OnPasswordExpiresOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemManager' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> SystemManager
        {
            get
            {
                return this._systemManager;
            }
            set
            {
                if ((this._systemManager != value))
                {
                    this.OnSystemManagerChanging(value);
                    this.RaiseDataMemberChanging("SystemManager");
                    this.ValidateProperty("SystemManager", value);
                    this._systemManager = value;
                    this.RaiseDataMemberChanged("SystemManager");
                    this.OnSystemManagerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SystemUserCodeID
        {
            get
            {
                return this._systemUserCodeID;
            }
            set
            {
                if ((this._systemUserCodeID != value))
                {
                    this.OnSystemUserCodeIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserCodeID");
                    this.ValidateProperty("SystemUserCodeID", value);
                    this._systemUserCodeID = value;
                    this.RaiseDataMemberChanged("SystemUserCodeID");
                    this.OnSystemUserCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserID
        {
            get
            {
                return this._systemUserID;
            }
            set
            {
                if ((this._systemUserID != value))
                {
                    this.OnSystemUserIDChanging(value);
                    this.ValidateProperty("SystemUserID", value);
                    this._systemUserID = value;
                    this.RaisePropertyChanged("SystemUserID");
                    this.OnSystemUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("SystemUser_SystemUserSecurity", "SystemUserID", "SystemUserID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SystemUserTypeID
        {
            get
            {
                return this._systemUserTypeID;
            }
            set
            {
                if ((this._systemUserTypeID != value))
                {
                    this.OnSystemUserTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserTypeID");
                    this.ValidateProperty("SystemUserTypeID", value);
                    this._systemUserTypeID = value;
                    this.RaiseDataMemberChanged("SystemUserTypeID");
                    this.OnSystemUserTypeIDChanged();
                }
            }
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SystemUser = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SystemUser = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._systemUserID;
        }
    }
    
    /// <summary>
    /// The 'SystemUserSecurity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.MenuItemSecurityGroup")]
    public sealed partial class SystemUserSecurity : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private EntityRef<SecurityGroup> _securityGroup;
        
        private string _securityGroupID;
        
        private EntityRef<SystemUser> _systemUser;
        
        private string _systemUserID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnSecurityGroupIDChanging(string value);
        partial void OnSecurityGroupIDChanged();
        partial void OnSystemUserIDChanging(string value);
        partial void OnSystemUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserSecurity"/> class.
        /// </summary>
        public SystemUserSecurity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SystemUserSecurity", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityGroup"/> entity.
        /// </summary>
        [Association("SecurityGroup_SystemUserSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityGroup SecurityGroup
        {
            get
            {
                if ((this._securityGroup == null))
                {
                    this._securityGroup = new EntityRef<SecurityGroup>(this, "SecurityGroup", this.FilterSecurityGroup);
                }
                return this._securityGroup.Entity;
            }
            set
            {
                SecurityGroup previous = this.SecurityGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityGroup", value);
                    if ((previous != null))
                    {
                        this._securityGroup.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SecurityGroupID = value.SecurityGroupID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.SecurityGroupID = default(string);
                    }
                    this._securityGroup.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupID
        {
            get
            {
                return this._securityGroupID;
            }
            set
            {
                if ((this._securityGroupID != value))
                {
                    this.OnSecurityGroupIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupID");
                    this.ValidateProperty("SecurityGroupID", value);
                    this._securityGroupID = value;
                    this.RaiseDataMemberChanged("SecurityGroupID");
                    this.OnSecurityGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SystemUser"/> entity.
        /// </summary>
        [Association("SystemUser_SystemUserSecurity", "SystemUserID", "SystemUserID", IsForeignKey=true)]
        [XmlIgnore()]
        public SystemUser SystemUser
        {
            get
            {
                if ((this._systemUser == null))
                {
                    this._systemUser = new EntityRef<SystemUser>(this, "SystemUser", this.FilterSystemUser);
                }
                return this._systemUser.Entity;
            }
            set
            {
                SystemUser previous = this.SystemUser;
                if ((previous != value))
                {
                    this.ValidateProperty("SystemUser", value);
                    if ((previous != null))
                    {
                        this._systemUser.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SystemUserID = value.SystemUserID;
                    }
                    else
                    {
                        this.SystemUserID = default(string);
                    }
                    this._systemUser.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("SystemUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserID
        {
            get
            {
                return this._systemUserID;
            }
            set
            {
                if ((this._systemUserID != value))
                {
                    this.OnSystemUserIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserID");
                    this.ValidateProperty("SystemUserID", value);
                    this._systemUserID = value;
                    this.RaiseDataMemberChanged("SystemUserID");
                    this.OnSystemUserIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterSecurityGroup(SecurityGroup entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        private bool FilterSystemUser(SystemUser entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((((this._companyID == null) 
                        || (this._securityGroupID == null)) 
                        || (this._systemUserID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupID, this._systemUserID);
        }
    }
}
namespace XERP.Web.Models.Plant
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Address' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class Address : Entity
    {
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private string _addressID;
        
        private long _autoID;
        
        private string _city;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _country;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private string _faxNum;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private EntityCollection<Plant> _plants;
        
        private string _state;
        
        private EntityCollection<Warehouse> _warehouses;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Address"/> class.
        /// </summary>
        public Address()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Address", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Addresses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Addresses.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Plant"/> entity instances.
        /// </summary>
        [Association("Address_Plant", "CompanyID,AddressID", "CompanyID,AddressID")]
        [XmlIgnore()]
        public EntityCollection<Plant> Plants
        {
            get
            {
                if ((this._plants == null))
                {
                    this._plants = new EntityCollection<Plant>(this, "Plants", this.FilterPlants, this.AttachPlants, this.DetachPlants);
                }
                return this._plants;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Warehouse"/> entity instances.
        /// </summary>
        [Association("Address_Warehouse", "CompanyID,AddressID", "CompanyID,AddressID")]
        [XmlIgnore()]
        public EntityCollection<Warehouse> Warehouses
        {
            get
            {
                if ((this._warehouses == null))
                {
                    this._warehouses = new EntityCollection<Warehouse>(this, "Warehouses", this.FilterWarehouses, this.AttachWarehouses, this.DetachWarehouses);
                }
                return this._warehouses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlants(Plant entity)
        {
            entity.Address = this;
        }
        
        private void DetachPlants(Plant entity)
        {
            entity.Address = null;
        }
        
        private bool FilterPlants(Plant entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private void AttachWarehouses(Warehouse entity)
        {
            entity.Address = this;
        }
        
        private void DetachWarehouses(Warehouse entity)
        {
            entity.Address = null;
        }
        
        private bool FilterWarehouses(Warehouse entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._addressID == null) 
                        || (this._companyID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._addressID, this._companyID);
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class Company : Entity
    {
        
        private Nullable<bool> _active;
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private EntityCollection<Address> _addresses;
        
        private long _autoID;
        
        private string _city;
        
        private string _companyCodeID;
        
        private string _companyID;
        
        private string _companyTypeID;
        
        private string _country;
        
        private Nullable<int> _currentFiscalYear;
        
        private string _defaultExecutablePath;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private string _faxNum;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private EntityCollection<PlantCode> _plantCodes;
        
        private EntityCollection<Plant> _plants;
        
        private EntityCollection<PlantType> _plantTypes;
        
        private string _state;
        
        private string _stateTaxCode;
        
        private string _taxRegionCode;
        
        private EntityCollection<Warehouse> _warehouses;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyCodeIDChanging(string value);
        partial void OnCompanyCodeIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyTypeIDChanging(string value);
        partial void OnCompanyTypeIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCurrentFiscalYearChanging(Nullable<int> value);
        partial void OnCurrentFiscalYearChanged();
        partial void OnDefaultExecutablePathChanging(string value);
        partial void OnDefaultExecutablePathChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnStateTaxCodeChanging(string value);
        partial void OnStateTaxCodeChanged();
        partial void OnTaxRegionCodeChanging(string value);
        partial void OnTaxRegionCodeChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Address"/> entity instances.
        /// </summary>
        [Association("Company_Address", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Address> Addresses
        {
            get
            {
                if ((this._addresses == null))
                {
                    this._addresses = new EntityCollection<Address>(this, "Addresses", this.FilterAddresses, this.AttachAddresses, this.DetachAddresses);
                }
                return this._addresses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyCodeID
        {
            get
            {
                return this._companyCodeID;
            }
            set
            {
                if ((this._companyCodeID != value))
                {
                    this.OnCompanyCodeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyCodeID");
                    this.ValidateProperty("CompanyCodeID", value);
                    this._companyCodeID = value;
                    this.RaiseDataMemberChanged("CompanyCodeID");
                    this.OnCompanyCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyTypeID
        {
            get
            {
                return this._companyTypeID;
            }
            set
            {
                if ((this._companyTypeID != value))
                {
                    this.OnCompanyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyTypeID");
                    this.ValidateProperty("CompanyTypeID", value);
                    this._companyTypeID = value;
                    this.RaiseDataMemberChanged("CompanyTypeID");
                    this.OnCompanyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentFiscalYear' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> CurrentFiscalYear
        {
            get
            {
                return this._currentFiscalYear;
            }
            set
            {
                if ((this._currentFiscalYear != value))
                {
                    this.OnCurrentFiscalYearChanging(value);
                    this.RaiseDataMemberChanging("CurrentFiscalYear");
                    this.ValidateProperty("CurrentFiscalYear", value);
                    this._currentFiscalYear = value;
                    this.RaiseDataMemberChanged("CurrentFiscalYear");
                    this.OnCurrentFiscalYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultExecutablePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DefaultExecutablePath
        {
            get
            {
                return this._defaultExecutablePath;
            }
            set
            {
                if ((this._defaultExecutablePath != value))
                {
                    this.OnDefaultExecutablePathChanging(value);
                    this.RaiseDataMemberChanging("DefaultExecutablePath");
                    this.ValidateProperty("DefaultExecutablePath", value);
                    this._defaultExecutablePath = value;
                    this.RaiseDataMemberChanged("DefaultExecutablePath");
                    this.OnDefaultExecutablePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PlantCode"/> entity instances.
        /// </summary>
        [Association("Company_PlantCode", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<PlantCode> PlantCodes
        {
            get
            {
                if ((this._plantCodes == null))
                {
                    this._plantCodes = new EntityCollection<PlantCode>(this, "PlantCodes", this.FilterPlantCodes, this.AttachPlantCodes, this.DetachPlantCodes);
                }
                return this._plantCodes;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Plant"/> entity instances.
        /// </summary>
        [Association("Company_Plant", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Plant> Plants
        {
            get
            {
                if ((this._plants == null))
                {
                    this._plants = new EntityCollection<Plant>(this, "Plants", this.FilterPlants, this.AttachPlants, this.DetachPlants);
                }
                return this._plants;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="PlantType"/> entity instances.
        /// </summary>
        [Association("Company_PlantType", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<PlantType> PlantTypes
        {
            get
            {
                if ((this._plantTypes == null))
                {
                    this._plantTypes = new EntityCollection<PlantType>(this, "PlantTypes", this.FilterPlantTypes, this.AttachPlantTypes, this.DetachPlantTypes);
                }
                return this._plantTypes;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateTaxCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string StateTaxCode
        {
            get
            {
                return this._stateTaxCode;
            }
            set
            {
                if ((this._stateTaxCode != value))
                {
                    this.OnStateTaxCodeChanging(value);
                    this.RaiseDataMemberChanging("StateTaxCode");
                    this.ValidateProperty("StateTaxCode", value);
                    this._stateTaxCode = value;
                    this.RaiseDataMemberChanged("StateTaxCode");
                    this.OnStateTaxCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxRegionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TaxRegionCode
        {
            get
            {
                return this._taxRegionCode;
            }
            set
            {
                if ((this._taxRegionCode != value))
                {
                    this.OnTaxRegionCodeChanging(value);
                    this.RaiseDataMemberChanging("TaxRegionCode");
                    this.ValidateProperty("TaxRegionCode", value);
                    this._taxRegionCode = value;
                    this.RaiseDataMemberChanged("TaxRegionCode");
                    this.OnTaxRegionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Warehouse"/> entity instances.
        /// </summary>
        [Association("Company_Warehouse", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Warehouse> Warehouses
        {
            get
            {
                if ((this._warehouses == null))
                {
                    this._warehouses = new EntityCollection<Warehouse>(this, "Warehouses", this.FilterWarehouses, this.AttachWarehouses, this.DetachWarehouses);
                }
                return this._warehouses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private void AttachAddresses(Address entity)
        {
            entity.Company = this;
        }
        
        private void DetachAddresses(Address entity)
        {
            entity.Company = null;
        }
        
        private bool FilterAddresses(Address entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlantCodes(PlantCode entity)
        {
            entity.Company = this;
        }
        
        private void DetachPlantCodes(PlantCode entity)
        {
            entity.Company = null;
        }
        
        private bool FilterPlantCodes(PlantCode entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlants(Plant entity)
        {
            entity.Company = this;
        }
        
        private void DetachPlants(Plant entity)
        {
            entity.Company = null;
        }
        
        private bool FilterPlants(Plant entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlantTypes(PlantType entity)
        {
            entity.Company = this;
        }
        
        private void DetachPlantTypes(PlantType entity)
        {
            entity.Company = null;
        }
        
        private bool FilterPlantTypes(PlantType entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachWarehouses(Warehouse entity)
        {
            entity.Company = this;
        }
        
        private void DetachWarehouses(Warehouse entity)
        {
            entity.Company = null;
        }
        
        private bool FilterWarehouses(Warehouse entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'Plant' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class Plant : Entity
    {
        
        private Nullable<bool> _active;
        
        private EntityRef<Address> _address;
        
        private string _addressID;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private Nullable<bool> _defaultPlant;
        
        private string _description;
        
        private string _name;
        
        private string _notes;
        
        private EntityRef<PlantCode> _plantCode;
        
        private string _plantCodeID;
        
        private string _plantID;
        
        private EntityRef<PlantType> _plantType;
        
        private string _plantTypeID;
        
        private EntityCollection<Warehouse> _warehouses;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDefaultPlantChanging(Nullable<bool> value);
        partial void OnDefaultPlantChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPlantCodeIDChanging(string value);
        partial void OnPlantCodeIDChanged();
        partial void OnPlantIDChanging(string value);
        partial void OnPlantIDChanged();
        partial void OnPlantTypeIDChanging(string value);
        partial void OnPlantTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Plant"/> class.
        /// </summary>
        public Plant()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Address"/> entity.
        /// </summary>
        [Association("Address_Plant", "CompanyID,AddressID", "CompanyID,AddressID", IsForeignKey=true)]
        [XmlIgnore()]
        public Address Address
        {
            get
            {
                if ((this._address == null))
                {
                    this._address = new EntityRef<Address>(this, "Address", this.FilterAddress);
                }
                return this._address.Entity;
            }
            set
            {
                Address previous = this.Address;
                if ((previous != value))
                {
                    this.ValidateProperty("Address", value);
                    if ((previous != null))
                    {
                        this._address.Entity = null;
                        previous.Plants.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.AddressID = value.AddressID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.AddressID = default(string);
                    }
                    this._address.Entity = value;
                    if ((value != null))
                    {
                        value.Plants.Add(this);
                    }
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Plant", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Plants.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Plants.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultPlant' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> DefaultPlant
        {
            get
            {
                return this._defaultPlant;
            }
            set
            {
                if ((this._defaultPlant != value))
                {
                    this.OnDefaultPlantChanging(value);
                    this.RaiseDataMemberChanging("DefaultPlant");
                    this.ValidateProperty("DefaultPlant", value);
                    this._defaultPlant = value;
                    this.RaiseDataMemberChanged("DefaultPlant");
                    this.OnDefaultPlantChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PlantCode"/> entity.
        /// </summary>
        [Association("PlantCode_Plant", "CompanyID,PlantCodeID", "CompanyID,PlantCodeID", IsForeignKey=true)]
        [XmlIgnore()]
        public PlantCode PlantCode
        {
            get
            {
                if ((this._plantCode == null))
                {
                    this._plantCode = new EntityRef<PlantCode>(this, "PlantCode", this.FilterPlantCode);
                }
                return this._plantCode.Entity;
            }
            set
            {
                PlantCode previous = this.PlantCode;
                if ((previous != value))
                {
                    this.ValidateProperty("PlantCode", value);
                    if ((previous != null))
                    {
                        this._plantCode.Entity = null;
                        previous.Plants.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.PlantCodeID = value.PlantCodeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.PlantCodeID = default(string);
                    }
                    this._plantCode.Entity = value;
                    if ((value != null))
                    {
                        value.Plants.Add(this);
                    }
                    this.RaisePropertyChanged("PlantCode");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantCodeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantCodeID
        {
            get
            {
                return this._plantCodeID;
            }
            set
            {
                if ((this._plantCodeID != value))
                {
                    this.OnPlantCodeIDChanging(value);
                    this.RaiseDataMemberChanging("PlantCodeID");
                    this.ValidateProperty("PlantCodeID", value);
                    this._plantCodeID = value;
                    this.RaiseDataMemberChanged("PlantCodeID");
                    this.OnPlantCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantID
        {
            get
            {
                return this._plantID;
            }
            set
            {
                if ((this._plantID != value))
                {
                    this.OnPlantIDChanging(value);
                    this.RaiseDataMemberChanging("PlantID");
                    this.ValidateProperty("PlantID", value);
                    this._plantID = value;
                    this.RaiseDataMemberChanged("PlantID");
                    this.OnPlantIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="PlantType"/> entity.
        /// </summary>
        [Association("PlantType_Plant", "CompanyID,PlantTypeID", "CompanyID,PlantTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public PlantType PlantType
        {
            get
            {
                if ((this._plantType == null))
                {
                    this._plantType = new EntityRef<PlantType>(this, "PlantType", this.FilterPlantType);
                }
                return this._plantType.Entity;
            }
            set
            {
                PlantType previous = this.PlantType;
                if ((previous != value))
                {
                    this.ValidateProperty("PlantType", value);
                    if ((previous != null))
                    {
                        this._plantType.Entity = null;
                        previous.Plants.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.PlantTypeID = value.PlantTypeID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.PlantTypeID = default(string);
                    }
                    this._plantType.Entity = value;
                    if ((value != null))
                    {
                        value.Plants.Add(this);
                    }
                    this.RaisePropertyChanged("PlantType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantTypeID
        {
            get
            {
                return this._plantTypeID;
            }
            set
            {
                if ((this._plantTypeID != value))
                {
                    this.OnPlantTypeIDChanging(value);
                    this.RaiseDataMemberChanging("PlantTypeID");
                    this.ValidateProperty("PlantTypeID", value);
                    this._plantTypeID = value;
                    this.RaiseDataMemberChanged("PlantTypeID");
                    this.OnPlantTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Warehouse"/> entity instances.
        /// </summary>
        [Association("Plant_Warehouse", "CompanyID,PlantID", "CompanyID,PlantID")]
        [XmlIgnore()]
        public EntityCollection<Warehouse> Warehouses
        {
            get
            {
                if ((this._warehouses == null))
                {
                    this._warehouses = new EntityCollection<Warehouse>(this, "Warehouses", this.FilterWarehouses, this.AttachWarehouses, this.DetachWarehouses);
                }
                return this._warehouses;
            }
        }
        
        private bool FilterAddress(Address entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterPlantCode(PlantCode entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantCodeID == this.PlantCodeID));
        }
        
        private bool FilterPlantType(PlantType entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantTypeID == this.PlantTypeID));
        }
        
        private void AttachWarehouses(Warehouse entity)
        {
            entity.Plant = this;
        }
        
        private void DetachWarehouses(Warehouse entity)
        {
            entity.Plant = null;
        }
        
        private bool FilterWarehouses(Warehouse entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantID == this.PlantID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._plantID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._plantID);
        }
    }
    
    /// <summary>
    /// The 'PlantCode' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class PlantCode : Entity
    {
        
        private long _autoID;
        
        private string _code;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private string _plantCodeID;
        
        private EntityCollection<Plant> _plants;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPlantCodeIDChanging(string value);
        partial void OnPlantCodeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlantCode"/> class.
        /// </summary>
        public PlantCode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_PlantCode", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.PlantCodes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.PlantCodes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantCodeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantCodeID
        {
            get
            {
                return this._plantCodeID;
            }
            set
            {
                if ((this._plantCodeID != value))
                {
                    this.OnPlantCodeIDChanging(value);
                    this.RaiseDataMemberChanging("PlantCodeID");
                    this.ValidateProperty("PlantCodeID", value);
                    this._plantCodeID = value;
                    this.RaiseDataMemberChanged("PlantCodeID");
                    this.OnPlantCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Plant"/> entity instances.
        /// </summary>
        [Association("PlantCode_Plant", "CompanyID,PlantCodeID", "CompanyID,PlantCodeID")]
        [XmlIgnore()]
        public EntityCollection<Plant> Plants
        {
            get
            {
                if ((this._plants == null))
                {
                    this._plants = new EntityCollection<Plant>(this, "Plants", this.FilterPlants, this.AttachPlants, this.DetachPlants);
                }
                return this._plants;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlants(Plant entity)
        {
            entity.PlantCode = this;
        }
        
        private void DetachPlants(Plant entity)
        {
            entity.PlantCode = null;
        }
        
        private bool FilterPlants(Plant entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantCodeID == this.PlantCodeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._plantCodeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._plantCodeID);
        }
    }
    
    /// <summary>
    /// The 'PlantType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class PlantType : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private EntityCollection<Plant> _plants;
        
        private string _plantTypeID;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnPlantTypeIDChanging(string value);
        partial void OnPlantTypeIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlantType"/> class.
        /// </summary>
        public PlantType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_PlantType", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.PlantTypes.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.PlantTypes.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Plant"/> entity instances.
        /// </summary>
        [Association("PlantType_Plant", "CompanyID,PlantTypeID", "CompanyID,PlantTypeID")]
        [XmlIgnore()]
        public EntityCollection<Plant> Plants
        {
            get
            {
                if ((this._plants == null))
                {
                    this._plants = new EntityCollection<Plant>(this, "Plants", this.FilterPlants, this.AttachPlants, this.DetachPlants);
                }
                return this._plants;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantTypeID
        {
            get
            {
                return this._plantTypeID;
            }
            set
            {
                if ((this._plantTypeID != value))
                {
                    this.OnPlantTypeIDChanging(value);
                    this.RaiseDataMemberChanging("PlantTypeID");
                    this.ValidateProperty("PlantTypeID", value);
                    this._plantTypeID = value;
                    this.RaiseDataMemberChanged("PlantTypeID");
                    this.OnPlantTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachPlants(Plant entity)
        {
            entity.PlantType = this;
        }
        
        private void DetachPlants(Plant entity)
        {
            entity.PlantType = null;
        }
        
        private bool FilterPlants(Plant entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantTypeID == this.PlantTypeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._plantTypeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._plantTypeID);
        }
    }
    
    /// <summary>
    /// The 'Warehouse' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.Plant")]
    public sealed partial class Warehouse : Entity
    {
        
        private Nullable<bool> _active;
        
        private EntityRef<Address> _address;
        
        private string _addressID;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private Nullable<bool> _defaultWarehouse;
        
        private string _description;
        
        private string _managerName;
        
        private string _name;
        
        private string _notes;
        
        private EntityRef<Plant> _plant;
        
        private string _plantID;
        
        private string _warehouseCodeID;
        
        private string _warehouseID;
        
        private string _warehouseTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDefaultWarehouseChanging(Nullable<bool> value);
        partial void OnDefaultWarehouseChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnManagerNameChanging(string value);
        partial void OnManagerNameChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPlantIDChanging(string value);
        partial void OnPlantIDChanged();
        partial void OnWarehouseCodeIDChanging(string value);
        partial void OnWarehouseCodeIDChanged();
        partial void OnWarehouseIDChanging(string value);
        partial void OnWarehouseIDChanged();
        partial void OnWarehouseTypeIDChanging(string value);
        partial void OnWarehouseTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Warehouse"/> class.
        /// </summary>
        public Warehouse()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Address"/> entity.
        /// </summary>
        [Association("Address_Warehouse", "CompanyID,AddressID", "CompanyID,AddressID", IsForeignKey=true)]
        [XmlIgnore()]
        public Address Address
        {
            get
            {
                if ((this._address == null))
                {
                    this._address = new EntityRef<Address>(this, "Address", this.FilterAddress);
                }
                return this._address.Entity;
            }
            set
            {
                Address previous = this.Address;
                if ((previous != value))
                {
                    this.ValidateProperty("Address", value);
                    if ((previous != null))
                    {
                        this._address.Entity = null;
                        previous.Warehouses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.AddressID = value.AddressID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.AddressID = default(string);
                    }
                    this._address.Entity = value;
                    if ((value != null))
                    {
                        value.Warehouses.Add(this);
                    }
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Warehouse", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Warehouses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Warehouses.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultWarehouse' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> DefaultWarehouse
        {
            get
            {
                return this._defaultWarehouse;
            }
            set
            {
                if ((this._defaultWarehouse != value))
                {
                    this.OnDefaultWarehouseChanging(value);
                    this.RaiseDataMemberChanging("DefaultWarehouse");
                    this.ValidateProperty("DefaultWarehouse", value);
                    this._defaultWarehouse = value;
                    this.RaiseDataMemberChanged("DefaultWarehouse");
                    this.OnDefaultWarehouseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ManagerName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string ManagerName
        {
            get
            {
                return this._managerName;
            }
            set
            {
                if ((this._managerName != value))
                {
                    this.OnManagerNameChanging(value);
                    this.RaiseDataMemberChanging("ManagerName");
                    this.ValidateProperty("ManagerName", value);
                    this._managerName = value;
                    this.RaiseDataMemberChanged("ManagerName");
                    this.OnManagerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Plant"/> entity.
        /// </summary>
        [Association("Plant_Warehouse", "CompanyID,PlantID", "CompanyID,PlantID", IsForeignKey=true)]
        [XmlIgnore()]
        public Plant Plant
        {
            get
            {
                if ((this._plant == null))
                {
                    this._plant = new EntityRef<Plant>(this, "Plant", this.FilterPlant);
                }
                return this._plant.Entity;
            }
            set
            {
                Plant previous = this.Plant;
                if ((previous != value))
                {
                    this.ValidateProperty("Plant", value);
                    if ((previous != null))
                    {
                        this._plant.Entity = null;
                        previous.Warehouses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.PlantID = value.PlantID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.PlantID = default(string);
                    }
                    this._plant.Entity = value;
                    if ((value != null))
                    {
                        value.Warehouses.Add(this);
                    }
                    this.RaisePropertyChanged("Plant");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlantID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string PlantID
        {
            get
            {
                return this._plantID;
            }
            set
            {
                if ((this._plantID != value))
                {
                    this.OnPlantIDChanging(value);
                    this.RaiseDataMemberChanging("PlantID");
                    this.ValidateProperty("PlantID", value);
                    this._plantID = value;
                    this.RaiseDataMemberChanged("PlantID");
                    this.OnPlantIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WarehouseCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WarehouseCodeID
        {
            get
            {
                return this._warehouseCodeID;
            }
            set
            {
                if ((this._warehouseCodeID != value))
                {
                    this.OnWarehouseCodeIDChanging(value);
                    this.RaiseDataMemberChanging("WarehouseCodeID");
                    this.ValidateProperty("WarehouseCodeID", value);
                    this._warehouseCodeID = value;
                    this.RaiseDataMemberChanged("WarehouseCodeID");
                    this.OnWarehouseCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WarehouseID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string WarehouseID
        {
            get
            {
                return this._warehouseID;
            }
            set
            {
                if ((this._warehouseID != value))
                {
                    this.OnWarehouseIDChanging(value);
                    this.RaiseDataMemberChanging("WarehouseID");
                    this.ValidateProperty("WarehouseID", value);
                    this._warehouseID = value;
                    this.RaiseDataMemberChanged("WarehouseID");
                    this.OnWarehouseIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WarehouseTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string WarehouseTypeID
        {
            get
            {
                return this._warehouseTypeID;
            }
            set
            {
                if ((this._warehouseTypeID != value))
                {
                    this.OnWarehouseTypeIDChanging(value);
                    this.RaiseDataMemberChanging("WarehouseTypeID");
                    this.ValidateProperty("WarehouseTypeID", value);
                    this._warehouseTypeID = value;
                    this.RaiseDataMemberChanged("WarehouseTypeID");
                    this.OnWarehouseTypeIDChanged();
                }
            }
        }
        
        private bool FilterAddress(Address entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterPlant(Plant entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.PlantID == this.PlantID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((((this._companyID == null) 
                        || (this._plantID == null)) 
                        || (this._warehouseID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._plantID, this._warehouseID);
        }
    }
}
namespace XERP.Web.Models.SystemUser
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'Address' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class Address : Entity
    {
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private string _addressID;
        
        private long _autoID;
        
        private string _city;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _country;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private EntityCollection<Employee> _employees;
        
        private string _faxNum;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private string _state;
        
        private EntityCollection<SystemUser> _systemUsers;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Address"/> class.
        /// </summary>
        public Address()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Address", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Addresses.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Addresses.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Address_Employee", "CompanyID,AddressID", "CompanyID,AddressID")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUser"/> entity instances.
        /// </summary>
        [Association("Address_SystemUser", "CompanyID,AddressID", "DefaultCompanyID,AddressID")]
        [XmlIgnore()]
        public EntityCollection<SystemUser> SystemUsers
        {
            get
            {
                if ((this._systemUsers == null))
                {
                    this._systemUsers = new EntityCollection<SystemUser>(this, "SystemUsers", this.FilterSystemUsers, this.AttachSystemUsers, this.DetachSystemUsers);
                }
                return this._systemUsers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Address = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Address = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private void AttachSystemUsers(SystemUser entity)
        {
            entity.Address = this;
        }
        
        private void DetachSystemUsers(SystemUser entity)
        {
            entity.Address = null;
        }
        
        private bool FilterSystemUsers(SystemUser entity)
        {
            return ((entity.DefaultCompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._addressID == null) 
                        || (this._companyID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._addressID, this._companyID);
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class Company : Entity
    {
        
        private Nullable<bool> _active;
        
        private string _address1;
        
        private string _address2;
        
        private string _address3;
        
        private EntityCollection<Address> _addresses;
        
        private long _autoID;
        
        private string _city;
        
        private string _companyCodeID;
        
        private string _companyID;
        
        private string _companyTypeID;
        
        private string _country;
        
        private Nullable<int> _currentFiscalYear;
        
        private string _defaultExecutablePath;
        
        private string _description;
        
        private string _email;
        
        private string _email2;
        
        private EntityCollection<Employee> _employees;
        
        private string _faxNum;
        
        private string _name;
        
        private string _notes;
        
        private string _phoneNum;
        
        private string _phoneNum2;
        
        private EntityCollection<SecurityGroup> _securityGroups;
        
        private string _state;
        
        private string _stateTaxCode;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        private string _taxRegionCode;
        
        private string _zip;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnAddress3Changing(string value);
        partial void OnAddress3Changed();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCityChanging(string value);
        partial void OnCityChanged();
        partial void OnCompanyCodeIDChanging(string value);
        partial void OnCompanyCodeIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnCompanyTypeIDChanging(string value);
        partial void OnCompanyTypeIDChanged();
        partial void OnCountryChanging(string value);
        partial void OnCountryChanged();
        partial void OnCurrentFiscalYearChanging(Nullable<int> value);
        partial void OnCurrentFiscalYearChanged();
        partial void OnDefaultExecutablePathChanging(string value);
        partial void OnDefaultExecutablePathChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnEmail2Changing(string value);
        partial void OnEmail2Changed();
        partial void OnFaxNumChanging(string value);
        partial void OnFaxNumChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnPhoneNumChanging(string value);
        partial void OnPhoneNumChanged();
        partial void OnPhoneNum2Changing(string value);
        partial void OnPhoneNum2Changed();
        partial void OnStateChanging(string value);
        partial void OnStateChanged();
        partial void OnStateTaxCodeChanging(string value);
        partial void OnStateTaxCodeChanged();
        partial void OnTaxRegionCodeChanging(string value);
        partial void OnTaxRegionCodeChanged();
        partial void OnZipChanging(string value);
        partial void OnZipChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address1' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address1
        {
            get
            {
                return this._address1;
            }
            set
            {
                if ((this._address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.RaiseDataMemberChanging("Address1");
                    this.ValidateProperty("Address1", value);
                    this._address1 = value;
                    this.RaiseDataMemberChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address2' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address2
        {
            get
            {
                return this._address2;
            }
            set
            {
                if ((this._address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.RaiseDataMemberChanging("Address2");
                    this.ValidateProperty("Address2", value);
                    this._address2 = value;
                    this.RaiseDataMemberChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Address3' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Address3
        {
            get
            {
                return this._address3;
            }
            set
            {
                if ((this._address3 != value))
                {
                    this.OnAddress3Changing(value);
                    this.RaiseDataMemberChanging("Address3");
                    this.ValidateProperty("Address3", value);
                    this._address3 = value;
                    this.RaiseDataMemberChanged("Address3");
                    this.OnAddress3Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Address"/> entity instances.
        /// </summary>
        [Association("Company_Address", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Address> Addresses
        {
            get
            {
                if ((this._addresses == null))
                {
                    this._addresses = new EntityCollection<Address>(this, "Addresses", this.FilterAddresses, this.AttachAddresses, this.DetachAddresses);
                }
                return this._addresses;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'City' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string City
        {
            get
            {
                return this._city;
            }
            set
            {
                if ((this._city != value))
                {
                    this.OnCityChanging(value);
                    this.RaiseDataMemberChanging("City");
                    this.ValidateProperty("City", value);
                    this._city = value;
                    this.RaiseDataMemberChanged("City");
                    this.OnCityChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyCodeID
        {
            get
            {
                return this._companyCodeID;
            }
            set
            {
                if ((this._companyCodeID != value))
                {
                    this.OnCompanyCodeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyCodeID");
                    this.ValidateProperty("CompanyCodeID", value);
                    this._companyCodeID = value;
                    this.RaiseDataMemberChanged("CompanyCodeID");
                    this.OnCompanyCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string CompanyTypeID
        {
            get
            {
                return this._companyTypeID;
            }
            set
            {
                if ((this._companyTypeID != value))
                {
                    this.OnCompanyTypeIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyTypeID");
                    this.ValidateProperty("CompanyTypeID", value);
                    this._companyTypeID = value;
                    this.RaiseDataMemberChanged("CompanyTypeID");
                    this.OnCompanyTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Country' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string Country
        {
            get
            {
                return this._country;
            }
            set
            {
                if ((this._country != value))
                {
                    this.OnCountryChanging(value);
                    this.RaiseDataMemberChanging("Country");
                    this.ValidateProperty("Country", value);
                    this._country = value;
                    this.RaiseDataMemberChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CurrentFiscalYear' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> CurrentFiscalYear
        {
            get
            {
                return this._currentFiscalYear;
            }
            set
            {
                if ((this._currentFiscalYear != value))
                {
                    this.OnCurrentFiscalYearChanging(value);
                    this.RaiseDataMemberChanging("CurrentFiscalYear");
                    this.ValidateProperty("CurrentFiscalYear", value);
                    this._currentFiscalYear = value;
                    this.RaiseDataMemberChanged("CurrentFiscalYear");
                    this.OnCurrentFiscalYearChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultExecutablePath' value.
        /// </summary>
        [DataMember()]
        [StringLength(500)]
        public string DefaultExecutablePath
        {
            get
            {
                return this._defaultExecutablePath;
            }
            set
            {
                if ((this._defaultExecutablePath != value))
                {
                    this.OnDefaultExecutablePathChanging(value);
                    this.RaiseDataMemberChanging("DefaultExecutablePath");
                    this.ValidateProperty("DefaultExecutablePath", value);
                    this._defaultExecutablePath = value;
                    this.RaiseDataMemberChanged("DefaultExecutablePath");
                    this.OnDefaultExecutablePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                if ((this._email != value))
                {
                    this.OnEmailChanging(value);
                    this.RaiseDataMemberChanging("Email");
                    this.ValidateProperty("Email", value);
                    this._email = value;
                    this.RaiseDataMemberChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Email2' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Email2
        {
            get
            {
                return this._email2;
            }
            set
            {
                if ((this._email2 != value))
                {
                    this.OnEmail2Changing(value);
                    this.RaiseDataMemberChanging("Email2");
                    this.ValidateProperty("Email2", value);
                    this._email2 = value;
                    this.RaiseDataMemberChanged("Email2");
                    this.OnEmail2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("Company_Employee", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FaxNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string FaxNum
        {
            get
            {
                return this._faxNum;
            }
            set
            {
                if ((this._faxNum != value))
                {
                    this.OnFaxNumChanging(value);
                    this.RaiseDataMemberChanging("FaxNum");
                    this.ValidateProperty("FaxNum", value);
                    this._faxNum = value;
                    this.RaiseDataMemberChanged("FaxNum");
                    this.OnFaxNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum
        {
            get
            {
                return this._phoneNum;
            }
            set
            {
                if ((this._phoneNum != value))
                {
                    this.OnPhoneNumChanging(value);
                    this.RaiseDataMemberChanging("PhoneNum");
                    this.ValidateProperty("PhoneNum", value);
                    this._phoneNum = value;
                    this.RaiseDataMemberChanged("PhoneNum");
                    this.OnPhoneNumChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PhoneNum2' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string PhoneNum2
        {
            get
            {
                return this._phoneNum2;
            }
            set
            {
                if ((this._phoneNum2 != value))
                {
                    this.OnPhoneNum2Changing(value);
                    this.RaiseDataMemberChanging("PhoneNum2");
                    this.ValidateProperty("PhoneNum2", value);
                    this._phoneNum2 = value;
                    this.RaiseDataMemberChanged("PhoneNum2");
                    this.OnPhoneNum2Changed();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SecurityGroup"/> entity instances.
        /// </summary>
        [Association("Company_SecurityGroup", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SecurityGroup> SecurityGroups
        {
            get
            {
                if ((this._securityGroups == null))
                {
                    this._securityGroups = new EntityCollection<SecurityGroup>(this, "SecurityGroups", this.FilterSecurityGroups, this.AttachSecurityGroups, this.DetachSecurityGroups);
                }
                return this._securityGroups;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'State' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                if ((this._state != value))
                {
                    this.OnStateChanging(value);
                    this.RaiseDataMemberChanging("State");
                    this.ValidateProperty("State", value);
                    this._state = value;
                    this.RaiseDataMemberChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'StateTaxCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string StateTaxCode
        {
            get
            {
                return this._stateTaxCode;
            }
            set
            {
                if ((this._stateTaxCode != value))
                {
                    this.OnStateTaxCodeChanging(value);
                    this.RaiseDataMemberChanging("StateTaxCode");
                    this.ValidateProperty("StateTaxCode", value);
                    this._stateTaxCode = value;
                    this.RaiseDataMemberChanged("StateTaxCode");
                    this.OnStateTaxCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("Company_SystemUserSecurity", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TaxRegionCode' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TaxRegionCode
        {
            get
            {
                return this._taxRegionCode;
            }
            set
            {
                if ((this._taxRegionCode != value))
                {
                    this.OnTaxRegionCodeChanging(value);
                    this.RaiseDataMemberChanging("TaxRegionCode");
                    this.ValidateProperty("TaxRegionCode", value);
                    this._taxRegionCode = value;
                    this.RaiseDataMemberChanged("TaxRegionCode");
                    this.OnTaxRegionCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Zip' value.
        /// </summary>
        [DataMember()]
        [StringLength(10)]
        public string Zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                if ((this._zip != value))
                {
                    this.OnZipChanging(value);
                    this.RaiseDataMemberChanging("Zip");
                    this.ValidateProperty("Zip", value);
                    this._zip = value;
                    this.RaiseDataMemberChanged("Zip");
                    this.OnZipChanged();
                }
            }
        }
        
        private void AttachAddresses(Address entity)
        {
            entity.Company = this;
        }
        
        private void DetachAddresses(Address entity)
        {
            entity.Company = null;
        }
        
        private bool FilterAddresses(Address entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.Company = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.Company = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSecurityGroups(SecurityGroup entity)
        {
            entity.Company = this;
        }
        
        private void DetachSecurityGroups(SecurityGroup entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSecurityGroups(SecurityGroup entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.Company = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.Company = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The 'Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class Employee : Entity
    {
        
        private EntityRef<Address> _address;
        
        private string _addressID;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _departmentID;
        
        private string _emergencyPhone;
        
        private string _emergengcyContactName;
        
        private string _employeeCodeID;
        
        private string _employeeID;
        
        private string _employeeTypeID;
        
        private string _firstName;
        
        private string _imageID;
        
        private Nullable<decimal> _laborRate;
        
        private string _lastName;
        
        private string _middleName;
        
        private string _notes;
        
        private Nullable<int> _shift;
        
        private string _status;
        
        private EntityRef<SystemUser> _systemUser;
        
        private string _systemUserID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDepartmentIDChanging(string value);
        partial void OnDepartmentIDChanged();
        partial void OnEmergencyPhoneChanging(string value);
        partial void OnEmergencyPhoneChanged();
        partial void OnEmergengcyContactNameChanging(string value);
        partial void OnEmergengcyContactNameChanged();
        partial void OnEmployeeCodeIDChanging(string value);
        partial void OnEmployeeCodeIDChanged();
        partial void OnEmployeeIDChanging(string value);
        partial void OnEmployeeIDChanged();
        partial void OnEmployeeTypeIDChanging(string value);
        partial void OnEmployeeTypeIDChanged();
        partial void OnFirstNameChanging(string value);
        partial void OnFirstNameChanged();
        partial void OnImageIDChanging(string value);
        partial void OnImageIDChanged();
        partial void OnLaborRateChanging(Nullable<decimal> value);
        partial void OnLaborRateChanged();
        partial void OnLastNameChanging(string value);
        partial void OnLastNameChanged();
        partial void OnMiddleNameChanging(string value);
        partial void OnMiddleNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnShiftChanging(Nullable<int> value);
        partial void OnShiftChanged();
        partial void OnStatusChanging(string value);
        partial void OnStatusChanged();
        partial void OnSystemUserIDChanging(string value);
        partial void OnSystemUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Employee"/> class.
        /// </summary>
        public Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Address"/> entity.
        /// </summary>
        [Association("Address_Employee", "CompanyID,AddressID", "CompanyID,AddressID", IsForeignKey=true)]
        [XmlIgnore()]
        public Address Address
        {
            get
            {
                if ((this._address == null))
                {
                    this._address = new EntityRef<Address>(this, "Address", this.FilterAddress);
                }
                return this._address.Entity;
            }
            set
            {
                Address previous = this.Address;
                if ((previous != value))
                {
                    this.ValidateProperty("Address", value);
                    if ((previous != null))
                    {
                        this._address.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.AddressID = value.AddressID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.AddressID = default(string);
                    }
                    this._address.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Employee", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DepartmentID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DepartmentID
        {
            get
            {
                return this._departmentID;
            }
            set
            {
                if ((this._departmentID != value))
                {
                    this.OnDepartmentIDChanging(value);
                    this.RaiseDataMemberChanging("DepartmentID");
                    this.ValidateProperty("DepartmentID", value);
                    this._departmentID = value;
                    this.RaiseDataMemberChanged("DepartmentID");
                    this.OnDepartmentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmergencyPhone' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EmergencyPhone
        {
            get
            {
                return this._emergencyPhone;
            }
            set
            {
                if ((this._emergencyPhone != value))
                {
                    this.OnEmergencyPhoneChanging(value);
                    this.RaiseDataMemberChanging("EmergencyPhone");
                    this.ValidateProperty("EmergencyPhone", value);
                    this._emergencyPhone = value;
                    this.RaiseDataMemberChanged("EmergencyPhone");
                    this.OnEmergencyPhoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmergengcyContactName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EmergengcyContactName
        {
            get
            {
                return this._emergengcyContactName;
            }
            set
            {
                if ((this._emergengcyContactName != value))
                {
                    this.OnEmergengcyContactNameChanging(value);
                    this.RaiseDataMemberChanging("EmergengcyContactName");
                    this.ValidateProperty("EmergengcyContactName", value);
                    this._emergengcyContactName = value;
                    this.RaiseDataMemberChanged("EmergengcyContactName");
                    this.OnEmergengcyContactNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EmployeeCodeID
        {
            get
            {
                return this._employeeCodeID;
            }
            set
            {
                if ((this._employeeCodeID != value))
                {
                    this.OnEmployeeCodeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeCodeID");
                    this.ValidateProperty("EmployeeCodeID", value);
                    this._employeeCodeID = value;
                    this.RaiseDataMemberChanged("EmployeeCodeID");
                    this.OnEmployeeCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string EmployeeID
        {
            get
            {
                return this._employeeID;
            }
            set
            {
                if ((this._employeeID != value))
                {
                    this.OnEmployeeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeID");
                    this.ValidateProperty("EmployeeID", value);
                    this._employeeID = value;
                    this.RaiseDataMemberChanged("EmployeeID");
                    this.OnEmployeeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmployeeTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EmployeeTypeID
        {
            get
            {
                return this._employeeTypeID;
            }
            set
            {
                if ((this._employeeTypeID != value))
                {
                    this.OnEmployeeTypeIDChanging(value);
                    this.RaiseDataMemberChanging("EmployeeTypeID");
                    this.ValidateProperty("EmployeeTypeID", value);
                    this._employeeTypeID = value;
                    this.RaiseDataMemberChanged("EmployeeTypeID");
                    this.OnEmployeeTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FirstName
        {
            get
            {
                return this._firstName;
            }
            set
            {
                if ((this._firstName != value))
                {
                    this.OnFirstNameChanging(value);
                    this.RaiseDataMemberChanging("FirstName");
                    this.ValidateProperty("FirstName", value);
                    this._firstName = value;
                    this.RaiseDataMemberChanged("FirstName");
                    this.OnFirstNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LaborRate' value.
        /// </summary>
        [DataMember()]
        public Nullable<decimal> LaborRate
        {
            get
            {
                return this._laborRate;
            }
            set
            {
                if ((this._laborRate != value))
                {
                    this.OnLaborRateChanging(value);
                    this.RaiseDataMemberChanging("LaborRate");
                    this.ValidateProperty("LaborRate", value);
                    this._laborRate = value;
                    this.RaiseDataMemberChanged("LaborRate");
                    this.OnLaborRateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'LastName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string LastName
        {
            get
            {
                return this._lastName;
            }
            set
            {
                if ((this._lastName != value))
                {
                    this.OnLastNameChanging(value);
                    this.RaiseDataMemberChanging("LastName");
                    this.ValidateProperty("LastName", value);
                    this._lastName = value;
                    this.RaiseDataMemberChanged("LastName");
                    this.OnLastNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'MiddleName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string MiddleName
        {
            get
            {
                return this._middleName;
            }
            set
            {
                if ((this._middleName != value))
                {
                    this.OnMiddleNameChanging(value);
                    this.RaiseDataMemberChanging("MiddleName");
                    this.ValidateProperty("MiddleName", value);
                    this._middleName = value;
                    this.RaiseDataMemberChanged("MiddleName");
                    this.OnMiddleNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Shift' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Shift
        {
            get
            {
                return this._shift;
            }
            set
            {
                if ((this._shift != value))
                {
                    this.OnShiftChanging(value);
                    this.RaiseDataMemberChanging("Shift");
                    this.ValidateProperty("Shift", value);
                    this._shift = value;
                    this.RaiseDataMemberChanged("Shift");
                    this.OnShiftChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Status' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Status
        {
            get
            {
                return this._status;
            }
            set
            {
                if ((this._status != value))
                {
                    this.OnStatusChanging(value);
                    this.RaiseDataMemberChanging("Status");
                    this.ValidateProperty("Status", value);
                    this._status = value;
                    this.RaiseDataMemberChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SystemUser"/> entity.
        /// </summary>
        [Association("SystemUser_Employee", "SystemUserID", "SystemUserID", IsForeignKey=true)]
        [XmlIgnore()]
        public SystemUser SystemUser
        {
            get
            {
                if ((this._systemUser == null))
                {
                    this._systemUser = new EntityRef<SystemUser>(this, "SystemUser", this.FilterSystemUser);
                }
                return this._systemUser.Entity;
            }
            set
            {
                SystemUser previous = this.SystemUser;
                if ((previous != value))
                {
                    this.ValidateProperty("SystemUser", value);
                    if ((previous != null))
                    {
                        this._systemUser.Entity = null;
                        previous.Employees.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SystemUserID = value.SystemUserID;
                    }
                    else
                    {
                        this.SystemUserID = default(string);
                    }
                    this._systemUser.Entity = value;
                    if ((value != null))
                    {
                        value.Employees.Add(this);
                    }
                    this.RaisePropertyChanged("SystemUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserID
        {
            get
            {
                return this._systemUserID;
            }
            set
            {
                if ((this._systemUserID != value))
                {
                    this.OnSystemUserIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserID");
                    this.ValidateProperty("SystemUserID", value);
                    this._systemUserID = value;
                    this.RaiseDataMemberChanged("SystemUserID");
                    this.OnSystemUserIDChanged();
                }
            }
        }
        
        private bool FilterAddress(Address entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterSystemUser(SystemUser entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._employeeID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._employeeID);
        }
    }
    
    /// <summary>
    /// The 'SecurityGroup' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class SecurityGroup : Entity
    {
        
        private Nullable<bool> _active;
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private string _description;
        
        private string _name;
        
        private string _notes;
        
        private string _securityGroupCodeID;
        
        private string _securityGroupID;
        
        private string _securityGroupTypeID;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnNotesChanging(string value);
        partial void OnNotesChanged();
        partial void OnSecurityGroupCodeIDChanging(string value);
        partial void OnSecurityGroupCodeIDChanged();
        partial void OnSecurityGroupIDChanging(string value);
        partial void OnSecurityGroupIDChanged();
        partial void OnSecurityGroupTypeIDChanging(string value);
        partial void OnSecurityGroupTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SecurityGroup"/> class.
        /// </summary>
        public SecurityGroup()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SecurityGroup", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SecurityGroups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SecurityGroups.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Notes' value.
        /// </summary>
        [DataMember()]
        [StringLength(200)]
        public string Notes
        {
            get
            {
                return this._notes;
            }
            set
            {
                if ((this._notes != value))
                {
                    this.OnNotesChanging(value);
                    this.RaiseDataMemberChanging("Notes");
                    this.ValidateProperty("Notes", value);
                    this._notes = value;
                    this.RaiseDataMemberChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupCodeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SecurityGroupCodeID
        {
            get
            {
                return this._securityGroupCodeID;
            }
            set
            {
                if ((this._securityGroupCodeID != value))
                {
                    this.OnSecurityGroupCodeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupCodeID");
                    this.ValidateProperty("SecurityGroupCodeID", value);
                    this._securityGroupCodeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupCodeID");
                    this.OnSecurityGroupCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupID
        {
            get
            {
                return this._securityGroupID;
            }
            set
            {
                if ((this._securityGroupID != value))
                {
                    this.OnSecurityGroupIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupID");
                    this.ValidateProperty("SecurityGroupID", value);
                    this._securityGroupID = value;
                    this.RaiseDataMemberChanged("SecurityGroupID");
                    this.OnSecurityGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupTypeID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string SecurityGroupTypeID
        {
            get
            {
                return this._securityGroupTypeID;
            }
            set
            {
                if ((this._securityGroupTypeID != value))
                {
                    this.OnSecurityGroupTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupTypeID");
                    this.ValidateProperty("SecurityGroupTypeID", value);
                    this._securityGroupTypeID = value;
                    this.RaiseDataMemberChanged("SecurityGroupTypeID");
                    this.OnSecurityGroupTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("SecurityGroup_SystemUserSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SecurityGroup = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SecurityGroup = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._companyID == null) 
                        || (this._securityGroupID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupID);
        }
    }
    
    /// <summary>
    /// The 'SystemUser' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class SystemUser : Entity
    {
        
        private Nullable<bool> _active;
        
        private EntityRef<Address> _address;
        
        private string _addressID;
        
        private long _autoID;
        
        private string _defaultCompanyID;
        
        private string _defaultPlantID;
        
        private string _emailAddress;
        
        private EntityCollection<Employee> _employees;
        
        private byte[] _imageID;
        
        private string _name;
        
        private string _password;
        
        private Nullable<bool> _passwordExpired;
        
        private Nullable<DateTime> _passwordExpiresOn;
        
        private Nullable<bool> _systemManager;
        
        private EntityRef<SystemUserCode> _systemUserCode;
        
        private string _systemUserCodeID;
        
        private string _systemUserID;
        
        private EntityCollection<SystemUserSecurity> _systemUserSecurities;
        
        private EntityRef<SystemUserType> _systemUserType;
        
        private string _systemUserTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnActiveChanging(Nullable<bool> value);
        partial void OnActiveChanged();
        partial void OnAddressIDChanging(string value);
        partial void OnAddressIDChanged();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnDefaultCompanyIDChanging(string value);
        partial void OnDefaultCompanyIDChanged();
        partial void OnDefaultPlantIDChanging(string value);
        partial void OnDefaultPlantIDChanged();
        partial void OnEmailAddressChanging(string value);
        partial void OnEmailAddressChanged();
        partial void OnImageIDChanging(byte[] value);
        partial void OnImageIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnPasswordChanging(string value);
        partial void OnPasswordChanged();
        partial void OnPasswordExpiredChanging(Nullable<bool> value);
        partial void OnPasswordExpiredChanged();
        partial void OnPasswordExpiresOnChanging(Nullable<DateTime> value);
        partial void OnPasswordExpiresOnChanged();
        partial void OnSystemManagerChanging(Nullable<bool> value);
        partial void OnSystemManagerChanged();
        partial void OnSystemUserCodeIDChanging(string value);
        partial void OnSystemUserCodeIDChanged();
        partial void OnSystemUserIDChanging(string value);
        partial void OnSystemUserIDChanged();
        partial void OnSystemUserTypeIDChanging(string value);
        partial void OnSystemUserTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUser"/> class.
        /// </summary>
        public SystemUser()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Active' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> Active
        {
            get
            {
                return this._active;
            }
            set
            {
                if ((this._active != value))
                {
                    this.OnActiveChanging(value);
                    this.RaiseDataMemberChanging("Active");
                    this.ValidateProperty("Active", value);
                    this._active = value;
                    this.RaiseDataMemberChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Address"/> entity.
        /// </summary>
        [Association("Address_SystemUser", "DefaultCompanyID,AddressID", "CompanyID,AddressID", IsForeignKey=true)]
        [XmlIgnore()]
        public Address Address
        {
            get
            {
                if ((this._address == null))
                {
                    this._address = new EntityRef<Address>(this, "Address", this.FilterAddress);
                }
                return this._address.Entity;
            }
            set
            {
                Address previous = this.Address;
                if ((previous != value))
                {
                    this.ValidateProperty("Address", value);
                    if ((previous != null))
                    {
                        this._address.Entity = null;
                        previous.SystemUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.DefaultCompanyID = value.CompanyID;
                        this.AddressID = value.AddressID;
                    }
                    else
                    {
                        this.DefaultCompanyID = default(string);
                        this.AddressID = default(string);
                    }
                    this._address.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUsers.Add(this);
                    }
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AddressID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string AddressID
        {
            get
            {
                return this._addressID;
            }
            set
            {
                if ((this._addressID != value))
                {
                    this.OnAddressIDChanging(value);
                    this.RaiseDataMemberChanging("AddressID");
                    this.ValidateProperty("AddressID", value);
                    this._addressID = value;
                    this.RaiseDataMemberChanged("AddressID");
                    this.OnAddressIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultCompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string DefaultCompanyID
        {
            get
            {
                return this._defaultCompanyID;
            }
            set
            {
                if ((this._defaultCompanyID != value))
                {
                    this.OnDefaultCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("DefaultCompanyID");
                    this.ValidateProperty("DefaultCompanyID", value);
                    this._defaultCompanyID = value;
                    this.RaiseDataMemberChanged("DefaultCompanyID");
                    this.OnDefaultCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DefaultPlantID' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string DefaultPlantID
        {
            get
            {
                return this._defaultPlantID;
            }
            set
            {
                if ((this._defaultPlantID != value))
                {
                    this.OnDefaultPlantIDChanging(value);
                    this.RaiseDataMemberChanging("DefaultPlantID");
                    this.ValidateProperty("DefaultPlantID", value);
                    this._defaultPlantID = value;
                    this.RaiseDataMemberChanged("DefaultPlantID");
                    this.OnDefaultPlantIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmailAddress' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string EmailAddress
        {
            get
            {
                return this._emailAddress;
            }
            set
            {
                if ((this._emailAddress != value))
                {
                    this.OnEmailAddressChanging(value);
                    this.RaiseDataMemberChanging("EmailAddress");
                    this.ValidateProperty("EmailAddress", value);
                    this._emailAddress = value;
                    this.RaiseDataMemberChanged("EmailAddress");
                    this.OnEmailAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Employee"/> entity instances.
        /// </summary>
        [Association("SystemUser_Employee", "SystemUserID", "SystemUserID")]
        [XmlIgnore()]
        public EntityCollection<Employee> Employees
        {
            get
            {
                if ((this._employees == null))
                {
                    this._employees = new EntityCollection<Employee>(this, "Employees", this.FilterEmployees, this.AttachEmployees, this.DetachEmployees);
                }
                return this._employees;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageID' value.
        /// </summary>
        [DataMember()]
        public byte[] ImageID
        {
            get
            {
                return this._imageID;
            }
            set
            {
                if ((this._imageID != value))
                {
                    this.OnImageIDChanging(value);
                    this.RaiseDataMemberChanging("ImageID");
                    this.ValidateProperty("ImageID", value);
                    this._imageID = value;
                    this.RaiseDataMemberChanged("ImageID");
                    this.OnImageIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Password' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Password
        {
            get
            {
                return this._password;
            }
            set
            {
                if ((this._password != value))
                {
                    this.OnPasswordChanging(value);
                    this.RaiseDataMemberChanging("Password");
                    this.ValidateProperty("Password", value);
                    this._password = value;
                    this.RaiseDataMemberChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordExpired' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> PasswordExpired
        {
            get
            {
                return this._passwordExpired;
            }
            set
            {
                if ((this._passwordExpired != value))
                {
                    this.OnPasswordExpiredChanging(value);
                    this.RaiseDataMemberChanging("PasswordExpired");
                    this.ValidateProperty("PasswordExpired", value);
                    this._passwordExpired = value;
                    this.RaiseDataMemberChanged("PasswordExpired");
                    this.OnPasswordExpiredChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PasswordExpiresOn' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> PasswordExpiresOn
        {
            get
            {
                return this._passwordExpiresOn;
            }
            set
            {
                if ((this._passwordExpiresOn != value))
                {
                    this.OnPasswordExpiresOnChanging(value);
                    this.RaiseDataMemberChanging("PasswordExpiresOn");
                    this.ValidateProperty("PasswordExpiresOn", value);
                    this._passwordExpiresOn = value;
                    this.RaiseDataMemberChanged("PasswordExpiresOn");
                    this.OnPasswordExpiresOnChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemManager' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> SystemManager
        {
            get
            {
                return this._systemManager;
            }
            set
            {
                if ((this._systemManager != value))
                {
                    this.OnSystemManagerChanging(value);
                    this.RaiseDataMemberChanging("SystemManager");
                    this.ValidateProperty("SystemManager", value);
                    this._systemManager = value;
                    this.RaiseDataMemberChanged("SystemManager");
                    this.OnSystemManagerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SystemUserCode"/> entity.
        /// </summary>
        [Association("SystemUserCode_SystemUser", "SystemUserCodeID", "SystemUserCodeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SystemUserCode SystemUserCode
        {
            get
            {
                if ((this._systemUserCode == null))
                {
                    this._systemUserCode = new EntityRef<SystemUserCode>(this, "SystemUserCode", this.FilterSystemUserCode);
                }
                return this._systemUserCode.Entity;
            }
            set
            {
                SystemUserCode previous = this.SystemUserCode;
                if ((previous != value))
                {
                    this.ValidateProperty("SystemUserCode", value);
                    if ((previous != null))
                    {
                        this._systemUserCode.Entity = null;
                        previous.SystemUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SystemUserCodeID = value.SystemUserCodeID;
                    }
                    else
                    {
                        this.SystemUserCodeID = default(string);
                    }
                    this._systemUserCode.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUsers.Add(this);
                    }
                    this.RaisePropertyChanged("SystemUserCode");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserCodeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserCodeID
        {
            get
            {
                return this._systemUserCodeID;
            }
            set
            {
                if ((this._systemUserCodeID != value))
                {
                    this.OnSystemUserCodeIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserCodeID");
                    this.ValidateProperty("SystemUserCodeID", value);
                    this._systemUserCodeID = value;
                    this.RaiseDataMemberChanged("SystemUserCodeID");
                    this.OnSystemUserCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserID
        {
            get
            {
                return this._systemUserID;
            }
            set
            {
                if ((this._systemUserID != value))
                {
                    this.OnSystemUserIDChanging(value);
                    this.ValidateProperty("SystemUserID", value);
                    this._systemUserID = value;
                    this.RaisePropertyChanged("SystemUserID");
                    this.OnSystemUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUserSecurity"/> entity instances.
        /// </summary>
        [Association("SystemUser_SystemUserSecurity", "SystemUserID", "SystemUserID")]
        [XmlIgnore()]
        public EntityCollection<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                if ((this._systemUserSecurities == null))
                {
                    this._systemUserSecurities = new EntityCollection<SystemUserSecurity>(this, "SystemUserSecurities", this.FilterSystemUserSecurities, this.AttachSystemUserSecurities, this.DetachSystemUserSecurities);
                }
                return this._systemUserSecurities;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SystemUserType"/> entity.
        /// </summary>
        [Association("SystemUserType_SystemUser", "SystemUserTypeID", "SystemUserTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SystemUserType SystemUserType
        {
            get
            {
                if ((this._systemUserType == null))
                {
                    this._systemUserType = new EntityRef<SystemUserType>(this, "SystemUserType", this.FilterSystemUserType);
                }
                return this._systemUserType.Entity;
            }
            set
            {
                SystemUserType previous = this.SystemUserType;
                if ((previous != value))
                {
                    this.ValidateProperty("SystemUserType", value);
                    if ((previous != null))
                    {
                        this._systemUserType.Entity = null;
                        previous.SystemUsers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SystemUserTypeID = value.SystemUserTypeID;
                    }
                    else
                    {
                        this.SystemUserTypeID = default(string);
                    }
                    this._systemUserType.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUsers.Add(this);
                    }
                    this.RaisePropertyChanged("SystemUserType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserTypeID
        {
            get
            {
                return this._systemUserTypeID;
            }
            set
            {
                if ((this._systemUserTypeID != value))
                {
                    this.OnSystemUserTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserTypeID");
                    this.ValidateProperty("SystemUserTypeID", value);
                    this._systemUserTypeID = value;
                    this.RaiseDataMemberChanged("SystemUserTypeID");
                    this.OnSystemUserTypeIDChanged();
                }
            }
        }
        
        private bool FilterAddress(Address entity)
        {
            return ((entity.CompanyID == this.DefaultCompanyID) 
                        && (entity.AddressID == this.AddressID));
        }
        
        private void AttachEmployees(Employee entity)
        {
            entity.SystemUser = this;
        }
        
        private void DetachEmployees(Employee entity)
        {
            entity.SystemUser = null;
        }
        
        private bool FilterEmployees(Employee entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        private bool FilterSystemUserCode(SystemUserCode entity)
        {
            return (entity.SystemUserCodeID == this.SystemUserCodeID);
        }
        
        private void AttachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SystemUser = this;
        }
        
        private void DetachSystemUserSecurities(SystemUserSecurity entity)
        {
            entity.SystemUser = null;
        }
        
        private bool FilterSystemUserSecurities(SystemUserSecurity entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        private bool FilterSystemUserType(SystemUserType entity)
        {
            return (entity.SystemUserTypeID == this.SystemUserTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._systemUserID;
        }
    }
    
    /// <summary>
    /// The 'SystemUserCode' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class SystemUserCode : Entity
    {
        
        private long _autoID;
        
        private string _code;
        
        private string _description;
        
        private string _systemUserCodeID;
        
        private EntityCollection<SystemUser> _systemUsers;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCodeChanging(string value);
        partial void OnCodeChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSystemUserCodeIDChanging(string value);
        partial void OnSystemUserCodeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserCode"/> class.
        /// </summary>
        public SystemUserCode()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Code' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Code
        {
            get
            {
                return this._code;
            }
            set
            {
                if ((this._code != value))
                {
                    this.OnCodeChanging(value);
                    this.RaiseDataMemberChanging("Code");
                    this.ValidateProperty("Code", value);
                    this._code = value;
                    this.RaiseDataMemberChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserCodeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserCodeID
        {
            get
            {
                return this._systemUserCodeID;
            }
            set
            {
                if ((this._systemUserCodeID != value))
                {
                    this.OnSystemUserCodeIDChanging(value);
                    this.ValidateProperty("SystemUserCodeID", value);
                    this._systemUserCodeID = value;
                    this.RaisePropertyChanged("SystemUserCodeID");
                    this.OnSystemUserCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUser"/> entity instances.
        /// </summary>
        [Association("SystemUserCode_SystemUser", "SystemUserCodeID", "SystemUserCodeID")]
        [XmlIgnore()]
        public EntityCollection<SystemUser> SystemUsers
        {
            get
            {
                if ((this._systemUsers == null))
                {
                    this._systemUsers = new EntityCollection<SystemUser>(this, "SystemUsers", this.FilterSystemUsers, this.AttachSystemUsers, this.DetachSystemUsers);
                }
                return this._systemUsers;
            }
        }
        
        private void AttachSystemUsers(SystemUser entity)
        {
            entity.SystemUserCode = this;
        }
        
        private void DetachSystemUsers(SystemUser entity)
        {
            entity.SystemUserCode = null;
        }
        
        private bool FilterSystemUsers(SystemUser entity)
        {
            return (entity.SystemUserCodeID == this.SystemUserCodeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._systemUserCodeID;
        }
    }
    
    /// <summary>
    /// The 'SystemUserSecurity' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class SystemUserSecurity : Entity
    {
        
        private long _autoID;
        
        private EntityRef<Company> _company;
        
        private string _companyID;
        
        private EntityRef<SecurityGroup> _securityGroup;
        
        private string _securityGroupID;
        
        private EntityRef<SystemUser> _systemUser;
        
        private string _systemUserID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnCompanyIDChanging(string value);
        partial void OnCompanyIDChanged();
        partial void OnSecurityGroupIDChanging(string value);
        partial void OnSecurityGroupIDChanged();
        partial void OnSystemUserIDChanging(string value);
        partial void OnSystemUserIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserSecurity"/> class.
        /// </summary>
        public SystemUserSecurity()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_SystemUserSecurity", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SecurityGroup"/> entity.
        /// </summary>
        [Association("SecurityGroup_SystemUserSecurity", "CompanyID,SecurityGroupID", "CompanyID,SecurityGroupID", IsForeignKey=true)]
        [XmlIgnore()]
        public SecurityGroup SecurityGroup
        {
            get
            {
                if ((this._securityGroup == null))
                {
                    this._securityGroup = new EntityRef<SecurityGroup>(this, "SecurityGroup", this.FilterSecurityGroup);
                }
                return this._securityGroup.Entity;
            }
            set
            {
                SecurityGroup previous = this.SecurityGroup;
                if ((previous != value))
                {
                    this.ValidateProperty("SecurityGroup", value);
                    if ((previous != null))
                    {
                        this._securityGroup.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                        this.SecurityGroupID = value.SecurityGroupID;
                    }
                    else
                    {
                        this.CompanyID = default(string);
                        this.SecurityGroupID = default(string);
                    }
                    this._securityGroup.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("SecurityGroup");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SecurityGroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SecurityGroupID
        {
            get
            {
                return this._securityGroupID;
            }
            set
            {
                if ((this._securityGroupID != value))
                {
                    this.OnSecurityGroupIDChanging(value);
                    this.RaiseDataMemberChanging("SecurityGroupID");
                    this.ValidateProperty("SecurityGroupID", value);
                    this._securityGroupID = value;
                    this.RaiseDataMemberChanged("SecurityGroupID");
                    this.OnSecurityGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SystemUser"/> entity.
        /// </summary>
        [Association("SystemUser_SystemUserSecurity", "SystemUserID", "SystemUserID", IsForeignKey=true)]
        [XmlIgnore()]
        public SystemUser SystemUser
        {
            get
            {
                if ((this._systemUser == null))
                {
                    this._systemUser = new EntityRef<SystemUser>(this, "SystemUser", this.FilterSystemUser);
                }
                return this._systemUser.Entity;
            }
            set
            {
                SystemUser previous = this.SystemUser;
                if ((previous != value))
                {
                    this.ValidateProperty("SystemUser", value);
                    if ((previous != null))
                    {
                        this._systemUser.Entity = null;
                        previous.SystemUserSecurities.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SystemUserID = value.SystemUserID;
                    }
                    else
                    {
                        this.SystemUserID = default(string);
                    }
                    this._systemUser.Entity = value;
                    if ((value != null))
                    {
                        value.SystemUserSecurities.Add(this);
                    }
                    this.RaisePropertyChanged("SystemUser");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserID
        {
            get
            {
                return this._systemUserID;
            }
            set
            {
                if ((this._systemUserID != value))
                {
                    this.OnSystemUserIDChanging(value);
                    this.RaiseDataMemberChanging("SystemUserID");
                    this.ValidateProperty("SystemUserID", value);
                    this._systemUserID = value;
                    this.RaiseDataMemberChanged("SystemUserID");
                    this.OnSystemUserIDChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterSecurityGroup(SecurityGroup entity)
        {
            return ((entity.CompanyID == this.CompanyID) 
                        && (entity.SecurityGroupID == this.SecurityGroupID));
        }
        
        private bool FilterSystemUser(SystemUser entity)
        {
            return (entity.SystemUserID == this.SystemUserID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((((this._companyID == null) 
                        || (this._securityGroupID == null)) 
                        || (this._systemUserID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._companyID, this._securityGroupID, this._systemUserID);
        }
    }
    
    /// <summary>
    /// The 'SystemUserType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/XERP.Web.Models.SystemUser")]
    public sealed partial class SystemUserType : Entity
    {
        
        private long _autoID;
        
        private string _description;
        
        private EntityCollection<SystemUser> _systemUsers;
        
        private string _systemUserTypeID;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAutoIDChanging(long value);
        partial void OnAutoIDChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSystemUserTypeIDChanging(string value);
        partial void OnSystemUserTypeIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserType"/> class.
        /// </summary>
        public SystemUserType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AutoID' value.
        /// </summary>
        [DataMember()]
        public long AutoID
        {
            get
            {
                return this._autoID;
            }
            set
            {
                if ((this._autoID != value))
                {
                    this.OnAutoIDChanging(value);
                    this.RaiseDataMemberChanging("AutoID");
                    this.ValidateProperty("AutoID", value);
                    this._autoID = value;
                    this.RaiseDataMemberChanged("AutoID");
                    this.OnAutoIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [StringLength(100)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SystemUser"/> entity instances.
        /// </summary>
        [Association("SystemUserType_SystemUser", "SystemUserTypeID", "SystemUserTypeID")]
        [XmlIgnore()]
        public EntityCollection<SystemUser> SystemUsers
        {
            get
            {
                if ((this._systemUsers == null))
                {
                    this._systemUsers = new EntityCollection<SystemUser>(this, "SystemUsers", this.FilterSystemUsers, this.AttachSystemUsers, this.DetachSystemUsers);
                }
                return this._systemUsers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SystemUserTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(20)]
        public string SystemUserTypeID
        {
            get
            {
                return this._systemUserTypeID;
            }
            set
            {
                if ((this._systemUserTypeID != value))
                {
                    this.OnSystemUserTypeIDChanging(value);
                    this.ValidateProperty("SystemUserTypeID", value);
                    this._systemUserTypeID = value;
                    this.RaisePropertyChanged("SystemUserTypeID");
                    this.OnSystemUserTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private void AttachSystemUsers(SystemUser entity)
        {
            entity.SystemUserType = this;
        }
        
        private void DetachSystemUsers(SystemUser entity)
        {
            entity.SystemUserType = null;
        }
        
        private bool FilterSystemUsers(SystemUser entity)
        {
            return (entity.SystemUserTypeID == this.SystemUserTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._systemUserTypeID;
        }
    }
}
namespace XERP.Web.Services.Company
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using XERP.Web.Models.Company;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'CompanyDomainService' DomainService.
    /// </summary>
    public sealed partial class CompanyDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDomainContext"/> class.
        /// </summary>
        public CompanyDomainContext() : 
                this(new WebDomainClient<ICompanyDomainServiceContract>(new Uri("XERP-Web-Services-Company-CompanyDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The CompanyDomainService service URI.</param>
        public CompanyDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ICompanyDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="CompanyDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public CompanyDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="CompanyDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CompanyCode"/> entity instances that have been loaded into this <see cref="CompanyDomainContext"/> instance.
        /// </summary>
        public EntitySet<CompanyCode> CompanyCodes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CompanyCode>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="CompanyType"/> entity instances that have been loaded into this <see cref="CompanyDomainContext"/> instance.
        /// </summary>
        public EntitySet<CompanyType> CompanyTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<CompanyType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CompanyCode"/> entity instances using the 'GetCompanyCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CompanyCode"/> entity instances.</returns>
        public EntityQuery<CompanyCode> GetCompanyCodesQuery()
        {
            this.ValidateMethod("GetCompanyCodesQuery", null);
            return base.CreateQuery<CompanyCode>("GetCompanyCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="CompanyType"/> entity instances using the 'GetCompanyTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="CompanyType"/> entity instances.</returns>
        public EntityQuery<CompanyType> GetCompanyTypesQuery()
        {
            this.ValidateMethod("GetCompanyTypesQuery", null);
            return base.CreateQuery<CompanyType>("GetCompanyTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new CompanyDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'CompanyDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ICompanyDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDomainService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDomainService/GetCompanies", ReplyAction="http://tempuri.org/CompanyDomainService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDomainService/GetCompanyCodesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDomainService/GetCompanyCodes", ReplyAction="http://tempuri.org/CompanyDomainService/GetCompanyCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyCodes' operation.</returns>
            QueryResult<CompanyCode> EndGetCompanyCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanyTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDomainService/GetCompanyTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDomainService/GetCompanyTypes", ReplyAction="http://tempuri.org/CompanyDomainService/GetCompanyTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanyTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanyTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanyTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanyTypes' operation.</returns>
            QueryResult<CompanyType> EndGetCompanyTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/CompanyDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/CompanyDomainService/SubmitChanges", ReplyAction="http://tempuri.org/CompanyDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class CompanyDomainContextEntityContainer : EntityContainer
        {
            
            public CompanyDomainContextEntityContainer()
            {
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<CompanyCode>(EntitySetOperations.All);
                this.CreateEntitySet<CompanyType>(EntitySetOperations.All);
            }
        }
    }
}
namespace XERP.Web.Services.MenuItemSecurityGroup
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using XERP.Web.Models.MenuItemSecurityGroup;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'MenuItemSecurityGroupDomainService' DomainService.
    /// </summary>
    public sealed partial class MenuItemSecurityGroupDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemSecurityGroupDomainContext"/> class.
        /// </summary>
        public MenuItemSecurityGroupDomainContext() : 
                this(new WebDomainClient<IMenuItemSecurityGroupDomainServiceContract>(new Uri("XERP-Web-Services-MenuItemSecurityGroup-MenuItemSecurityGroupDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemSecurityGroupDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The MenuItemSecurityGroupDomainService service URI.</param>
        public MenuItemSecurityGroupDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IMenuItemSecurityGroupDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="MenuItemSecurityGroupDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public MenuItemSecurityGroupDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="MenuItem"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<MenuItem> MenuItems
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MenuItem>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MenuItemCode"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<MenuItemCode> MenuItemCodes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MenuItemCode>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MenuItemType"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<MenuItemType> MenuItemTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MenuItemType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="MenuSecurity"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<MenuSecurity> MenuSecurities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<MenuSecurity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SecurityGroupCode"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<SecurityGroupCode> SecurityGroupCodes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SecurityGroupCode>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SecurityGroup"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<SecurityGroup> SecurityGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SecurityGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SecurityGroupType"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<SecurityGroupType> SecurityGroupTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SecurityGroupType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUser"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUser> SystemUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUserSecurity"/> entity instances that have been loaded into this <see cref="MenuItemSecurityGroupDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUserSecurity>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuItem"/> entity instances using the 'GetByAutoID' query.
        /// </summary>
        /// <param name="autoID">The value for the 'autoID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuItem"/> entity instances.</returns>
        public EntityQuery<MenuItem> GetByAutoIDQuery(long autoID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("autoID", autoID);
            this.ValidateMethod("GetByAutoIDQuery", parameters);
            return base.CreateQuery<MenuItem>("GetByAutoID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuItem"/> entity instances using the 'GetFlatMenuItems' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuItem"/> entity instances.</returns>
        public EntityQuery<MenuItem> GetFlatMenuItemsQuery()
        {
            this.ValidateMethod("GetFlatMenuItemsQuery", null);
            return base.CreateQuery<MenuItem>("GetFlatMenuItems", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuItemCode"/> entity instances using the 'GetMenuItemCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuItemCode"/> entity instances.</returns>
        public EntityQuery<MenuItemCode> GetMenuItemCodesQuery()
        {
            this.ValidateMethod("GetMenuItemCodesQuery", null);
            return base.CreateQuery<MenuItemCode>("GetMenuItemCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuItem"/> entity instances using the 'GetMenuItems' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuItem"/> entity instances.</returns>
        public EntityQuery<MenuItem> GetMenuItemsQuery()
        {
            this.ValidateMethod("GetMenuItemsQuery", null);
            return base.CreateQuery<MenuItem>("GetMenuItems", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuItemType"/> entity instances using the 'GetMenuItemTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuItemType"/> entity instances.</returns>
        public EntityQuery<MenuItemType> GetMenuItemTypesQuery()
        {
            this.ValidateMethod("GetMenuItemTypesQuery", null);
            return base.CreateQuery<MenuItemType>("GetMenuItemTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="MenuSecurity"/> entity instances using the 'GetMenuSecurities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="MenuSecurity"/> entity instances.</returns>
        public EntityQuery<MenuSecurity> GetMenuSecuritiesQuery()
        {
            this.ValidateMethod("GetMenuSecuritiesQuery", null);
            return base.CreateQuery<MenuSecurity>("GetMenuSecurities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SecurityGroupCode"/> entity instances using the 'GetSecurityGroupCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SecurityGroupCode"/> entity instances.</returns>
        public EntityQuery<SecurityGroupCode> GetSecurityGroupCodesQuery()
        {
            this.ValidateMethod("GetSecurityGroupCodesQuery", null);
            return base.CreateQuery<SecurityGroupCode>("GetSecurityGroupCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SecurityGroup"/> entity instances using the 'GetSecurityGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SecurityGroup"/> entity instances.</returns>
        public EntityQuery<SecurityGroup> GetSecurityGroupsQuery()
        {
            this.ValidateMethod("GetSecurityGroupsQuery", null);
            return base.CreateQuery<SecurityGroup>("GetSecurityGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SecurityGroupType"/> entity instances using the 'GetSecurityGroupTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SecurityGroupType"/> entity instances.</returns>
        public EntityQuery<SecurityGroupType> GetSecurityGroupTypesQuery()
        {
            this.ValidateMethod("GetSecurityGroupTypesQuery", null);
            return base.CreateQuery<SecurityGroupType>("GetSecurityGroupTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUser"/> entity instances using the 'GetSystemUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUser"/> entity instances.</returns>
        public EntityQuery<SystemUser> GetSystemUsersQuery()
        {
            this.ValidateMethod("GetSystemUsersQuery", null);
            return base.CreateQuery<SystemUser>("GetSystemUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUserSecurity"/> entity instances using the 'GetSystemUserSecurities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUserSecurity"/> entity instances.</returns>
        public EntityQuery<SystemUserSecurity> GetSystemUserSecuritiesQuery()
        {
            this.ValidateMethod("GetSystemUserSecuritiesQuery", null);
            return base.CreateQuery<SystemUserSecurity>("GetSystemUserSecurities", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new MenuItemSecurityGroupDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'MenuItemSecurityGroupDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IMenuItemSecurityGroupDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetByAutoID' operation.
            /// </summary>
            /// <param name="autoID">The value for the 'autoID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetByAutoIDDomainServiceFau" +
                "lt", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetByAutoID", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetByAutoIDResponse")]
            [WebGet()]
            IAsyncResult BeginGetByAutoID(long autoID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetByAutoID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetByAutoID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetByAutoID' operation.</returns>
            QueryResult<MenuItem> EndGetByAutoID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetCompaniesDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetCompanies", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetFlatMenuItems' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetFlatMenuItemsDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetFlatMenuItems", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetFlatMenuItemsResponse")]
            [WebGet()]
            IAsyncResult BeginGetFlatMenuItems(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetFlatMenuItems'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetFlatMenuItems'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetFlatMenuItems' operation.</returns>
            QueryResult<MenuItem> EndGetFlatMenuItems(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMenuItemCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemCodesDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemCodes", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMenuItemCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMenuItemCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMenuItemCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMenuItemCodes' operation.</returns>
            QueryResult<MenuItemCode> EndGetMenuItemCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMenuItems' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemsDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItems", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemsResponse")]
            [WebGet()]
            IAsyncResult BeginGetMenuItems(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMenuItems'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMenuItems'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMenuItems' operation.</returns>
            QueryResult<MenuItem> EndGetMenuItems(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMenuItemTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemTypesDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemTypes", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuItemTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMenuItemTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMenuItemTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMenuItemTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMenuItemTypes' operation.</returns>
            QueryResult<MenuItemType> EndGetMenuItemTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetMenuSecurities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuSecuritiesDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuSecurities", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetMenuSecuritiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetMenuSecurities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetMenuSecurities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetMenuSecurities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetMenuSecurities' operation.</returns>
            QueryResult<MenuSecurity> EndGetMenuSecurities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSecurityGroupCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupCodesDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupCodes", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupCodesRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetSecurityGroupCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSecurityGroupCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSecurityGroupCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSecurityGroupCodes' operation.</returns>
            QueryResult<SecurityGroupCode> EndGetSecurityGroupCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSecurityGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupsDomainServ" +
                "iceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroups", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSecurityGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSecurityGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSecurityGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSecurityGroups' operation.</returns>
            QueryResult<SecurityGroup> EndGetSecurityGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSecurityGroupTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupTypesDomain" +
                "ServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupTypes", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSecurityGroupTypesRespon" +
                "se")]
            [WebGet()]
            IAsyncResult BeginGetSecurityGroupTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSecurityGroupTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSecurityGroupTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSecurityGroupTypes' operation.</returns>
            QueryResult<SecurityGroupType> EndGetSecurityGroupTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUsersDomainService" +
                "Fault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUsers", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUsers' operation.</returns>
            QueryResult<SystemUser> EndGetSystemUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUserSecurities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUserSecuritiesDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUserSecurities", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/GetSystemUserSecuritiesResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUserSecurities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUserSecurities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUserSecurities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUserSecurities' operation.</returns>
            QueryResult<SystemUserSecurity> EndGetSystemUserSecurities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/MenuItemSecurityGroupDomainService/SubmitChangesDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/MenuItemSecurityGroupDomainService/SubmitChanges", ReplyAction="http://tempuri.org/MenuItemSecurityGroupDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class MenuItemSecurityGroupDomainContextEntityContainer : EntityContainer
        {
            
            public MenuItemSecurityGroupDomainContextEntityContainer()
            {
                this.CreateEntitySet<Company>(EntitySetOperations.None);
                this.CreateEntitySet<MenuItem>(EntitySetOperations.All);
                this.CreateEntitySet<MenuItemCode>(EntitySetOperations.All);
                this.CreateEntitySet<MenuItemType>(EntitySetOperations.All);
                this.CreateEntitySet<MenuSecurity>(EntitySetOperations.All);
                this.CreateEntitySet<SecurityGroup>(EntitySetOperations.All);
                this.CreateEntitySet<SecurityGroupCode>(EntitySetOperations.All);
                this.CreateEntitySet<SecurityGroupType>(EntitySetOperations.All);
                this.CreateEntitySet<SystemUser>(EntitySetOperations.None);
                this.CreateEntitySet<SystemUserSecurity>(EntitySetOperations.None);
            }
        }
    }
}
namespace XERP.Web.Services.Plant
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using XERP.Web.Models.Plant;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'PlantDomainService' DomainService.
    /// </summary>
    public sealed partial class PlantDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlantDomainContext"/> class.
        /// </summary>
        public PlantDomainContext() : 
                this(new WebDomainClient<IPlantDomainServiceContract>(new Uri("XERP-Web-Services-Plant-PlantDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlantDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The PlantDomainService service URI.</param>
        public PlantDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<IPlantDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="PlantDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public PlantDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Address"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<Address> Addresses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Address>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PlantCode"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<PlantCode> PlantCodes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PlantCode>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Plant"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<Plant> Plants
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Plant>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="PlantType"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<PlantType> PlantTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<PlantType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Warehouse"/> entity instances that have been loaded into this <see cref="PlantDomainContext"/> instance.
        /// </summary>
        public EntitySet<Warehouse> Warehouses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Warehouse>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Address"/> entity instances using the 'GetAddresses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Address"/> entity instances.</returns>
        public EntityQuery<Address> GetAddressesQuery()
        {
            this.ValidateMethod("GetAddressesQuery", null);
            return base.CreateQuery<Address>("GetAddresses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PlantCode"/> entity instances using the 'GetPlantCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PlantCode"/> entity instances.</returns>
        public EntityQuery<PlantCode> GetPlantCodesQuery()
        {
            this.ValidateMethod("GetPlantCodesQuery", null);
            return base.CreateQuery<PlantCode>("GetPlantCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Plant"/> entity instances using the 'GetPlants' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Plant"/> entity instances.</returns>
        public EntityQuery<Plant> GetPlantsQuery()
        {
            this.ValidateMethod("GetPlantsQuery", null);
            return base.CreateQuery<Plant>("GetPlants", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="PlantType"/> entity instances using the 'GetPlantTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="PlantType"/> entity instances.</returns>
        public EntityQuery<PlantType> GetPlantTypesQuery()
        {
            this.ValidateMethod("GetPlantTypesQuery", null);
            return base.CreateQuery<PlantType>("GetPlantTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Warehouse"/> entity instances using the 'GetWarehouses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Warehouse"/> entity instances.</returns>
        public EntityQuery<Warehouse> GetWarehousesQuery()
        {
            this.ValidateMethod("GetWarehousesQuery", null);
            return base.CreateQuery<Warehouse>("GetWarehouses", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new PlantDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'PlantDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IPlantDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAddresses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetAddressesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetAddresses", ReplyAction="http://tempuri.org/PlantDomainService/GetAddressesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAddresses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAddresses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAddresses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAddresses' operation.</returns>
            QueryResult<Address> EndGetAddresses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetCompanies", ReplyAction="http://tempuri.org/PlantDomainService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPlantCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetPlantCodesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetPlantCodes", ReplyAction="http://tempuri.org/PlantDomainService/GetPlantCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPlantCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPlantCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPlantCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPlantCodes' operation.</returns>
            QueryResult<PlantCode> EndGetPlantCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPlants' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetPlantsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetPlants", ReplyAction="http://tempuri.org/PlantDomainService/GetPlantsResponse")]
            [WebGet()]
            IAsyncResult BeginGetPlants(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPlants'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPlants'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPlants' operation.</returns>
            QueryResult<Plant> EndGetPlants(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetPlantTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetPlantTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetPlantTypes", ReplyAction="http://tempuri.org/PlantDomainService/GetPlantTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetPlantTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetPlantTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetPlantTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetPlantTypes' operation.</returns>
            QueryResult<PlantType> EndGetPlantTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWarehouses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/GetWarehousesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/GetWarehouses", ReplyAction="http://tempuri.org/PlantDomainService/GetWarehousesResponse")]
            [WebGet()]
            IAsyncResult BeginGetWarehouses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWarehouses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWarehouses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWarehouses' operation.</returns>
            QueryResult<Warehouse> EndGetWarehouses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/PlantDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/PlantDomainService/SubmitChanges", ReplyAction="http://tempuri.org/PlantDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class PlantDomainContextEntityContainer : EntityContainer
        {
            
            public PlantDomainContextEntityContainer()
            {
                this.CreateEntitySet<Address>(EntitySetOperations.None);
                this.CreateEntitySet<Company>(EntitySetOperations.None);
                this.CreateEntitySet<Plant>(EntitySetOperations.All);
                this.CreateEntitySet<PlantCode>(EntitySetOperations.All);
                this.CreateEntitySet<PlantType>(EntitySetOperations.All);
                this.CreateEntitySet<Warehouse>(EntitySetOperations.None);
            }
        }
    }
}
namespace XERP.Web.Services.SystemUser
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using XERP.Web.Models.SystemUser;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'SystemUserDomainService' DomainService.
    /// </summary>
    public sealed partial class SystemUserDomainContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserDomainContext"/> class.
        /// </summary>
        public SystemUserDomainContext() : 
                this(new WebDomainClient<ISystemUserDomainServiceContract>(new Uri("XERP-Web-Services-SystemUser-SystemUserDomainService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserDomainContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The SystemUserDomainService service URI.</param>
        public SystemUserDomainContext(Uri serviceUri) : 
                this(new WebDomainClient<ISystemUserDomainServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SystemUserDomainContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public SystemUserDomainContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="Address"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<Address> Addresses
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Address>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Employee"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<Employee> Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SecurityGroup"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<SecurityGroup> SecurityGroups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SecurityGroup>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUserCode"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUserCode> SystemUserCodes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUserCode>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUser"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUser> SystemUsers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUser>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUserSecurity"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUserSecurity> SystemUserSecurities
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUserSecurity>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SystemUserType"/> entity instances that have been loaded into this <see cref="SystemUserDomainContext"/> instance.
        /// </summary>
        public EntitySet<SystemUserType> SystemUserTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SystemUserType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Address"/> entity instances using the 'GetAddresses' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Address"/> entity instances.</returns>
        public EntityQuery<Address> GetAddressesQuery()
        {
            this.ValidateMethod("GetAddressesQuery", null);
            return base.CreateQuery<Address>("GetAddresses", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entity instances using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entity instances.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Employee"/> entity instances using the 'GetEmployees' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Employee"/> entity instances.</returns>
        public EntityQuery<Employee> GetEmployeesQuery()
        {
            this.ValidateMethod("GetEmployeesQuery", null);
            return base.CreateQuery<Employee>("GetEmployees", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SecurityGroup"/> entity instances using the 'GetSecurityGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SecurityGroup"/> entity instances.</returns>
        public EntityQuery<SecurityGroup> GetSecurityGroupsQuery()
        {
            this.ValidateMethod("GetSecurityGroupsQuery", null);
            return base.CreateQuery<SecurityGroup>("GetSecurityGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUserCode"/> entity instances using the 'GetSystemUserCodes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUserCode"/> entity instances.</returns>
        public EntityQuery<SystemUserCode> GetSystemUserCodesQuery()
        {
            this.ValidateMethod("GetSystemUserCodesQuery", null);
            return base.CreateQuery<SystemUserCode>("GetSystemUserCodes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUser"/> entity instances using the 'GetSystemUsers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUser"/> entity instances.</returns>
        public EntityQuery<SystemUser> GetSystemUsersQuery()
        {
            this.ValidateMethod("GetSystemUsersQuery", null);
            return base.CreateQuery<SystemUser>("GetSystemUsers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUserSecurity"/> entity instances using the 'GetSystemUserSecurities' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUserSecurity"/> entity instances.</returns>
        public EntityQuery<SystemUserSecurity> GetSystemUserSecuritiesQuery()
        {
            this.ValidateMethod("GetSystemUserSecuritiesQuery", null);
            return base.CreateQuery<SystemUserSecurity>("GetSystemUserSecurities", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SystemUserType"/> entity instances using the 'GetSystemUserTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SystemUserType"/> entity instances.</returns>
        public EntityQuery<SystemUserType> GetSystemUserTypesQuery()
        {
            this.ValidateMethod("GetSystemUserTypesQuery", null);
            return base.CreateQuery<SystemUserType>("GetSystemUserTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new SystemUserDomainContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'SystemUserDomainService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface ISystemUserDomainServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetAddresses' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetAddressesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetAddresses", ReplyAction="http://tempuri.org/SystemUserDomainService/GetAddressesResponse")]
            [WebGet()]
            IAsyncResult BeginGetAddresses(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetAddresses'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetAddresses'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetAddresses' operation.</returns>
            QueryResult<Address> EndGetAddresses(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetCompanies", ReplyAction="http://tempuri.org/SystemUserDomainService/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetEmployees' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetEmployeesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetEmployees", ReplyAction="http://tempuri.org/SystemUserDomainService/GetEmployeesResponse")]
            [WebGet()]
            IAsyncResult BeginGetEmployees(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetEmployees'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetEmployees'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetEmployees' operation.</returns>
            QueryResult<Employee> EndGetEmployees(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSecurityGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetSecurityGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetSecurityGroups", ReplyAction="http://tempuri.org/SystemUserDomainService/GetSecurityGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSecurityGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSecurityGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSecurityGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSecurityGroups' operation.</returns>
            QueryResult<SecurityGroup> EndGetSecurityGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUserCodes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetSystemUserCodesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetSystemUserCodes", ReplyAction="http://tempuri.org/SystemUserDomainService/GetSystemUserCodesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUserCodes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUserCodes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUserCodes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUserCodes' operation.</returns>
            QueryResult<SystemUserCode> EndGetSystemUserCodes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUsers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetSystemUsersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetSystemUsers", ReplyAction="http://tempuri.org/SystemUserDomainService/GetSystemUsersResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUsers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUsers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUsers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUsers' operation.</returns>
            QueryResult<SystemUser> EndGetSystemUsers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUserSecurities' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetSystemUserSecuritiesDomainServiceFa" +
                "ult", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetSystemUserSecurities", ReplyAction="http://tempuri.org/SystemUserDomainService/GetSystemUserSecuritiesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUserSecurities(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUserSecurities'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUserSecurities'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUserSecurities' operation.</returns>
            QueryResult<SystemUserSecurity> EndGetSystemUserSecurities(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSystemUserTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/GetSystemUserTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/GetSystemUserTypes", ReplyAction="http://tempuri.org/SystemUserDomainService/GetSystemUserTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSystemUserTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSystemUserTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSystemUserTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSystemUserTypes' operation.</returns>
            QueryResult<SystemUserType> EndGetSystemUserTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/SystemUserDomainService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/SystemUserDomainService/SubmitChanges", ReplyAction="http://tempuri.org/SystemUserDomainService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class SystemUserDomainContextEntityContainer : EntityContainer
        {
            
            public SystemUserDomainContextEntityContainer()
            {
                this.CreateEntitySet<Address>(EntitySetOperations.None);
                this.CreateEntitySet<Company>(EntitySetOperations.None);
                this.CreateEntitySet<Employee>(EntitySetOperations.None);
                this.CreateEntitySet<SecurityGroup>(EntitySetOperations.None);
                this.CreateEntitySet<SystemUser>(EntitySetOperations.All);
                this.CreateEntitySet<SystemUserCode>(EntitySetOperations.All);
                this.CreateEntitySet<SystemUserSecurity>(EntitySetOperations.All);
                this.CreateEntitySet<SystemUserType>(EntitySetOperations.All);
            }
        }
    }
}
